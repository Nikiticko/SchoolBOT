# === bot.py ===
"""
–í–ê–ñ–ù–û:
- –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º, –Ω–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö/—Å–µ—Ä–≤–µ—Ä–∞—Ö).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ polling –∏ webhook! –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling (bot.infinity_polling).
- –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (systemd, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫), —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
- –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É 409 Conflict ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python —Å —ç—Ç–∏–º –±–æ—Ç–æ–º.
"""
from telebot import TeleBot
from config import API_TOKEN, CHECK_INTERVAL
from data.db import init_db, migrate_database
from services.monitor import start_monitoring
from utils.logger import setup_logger, log_bot_startup, log_bot_shutdown, log_error
from utils.exceptions import (
    BotException, DatabaseException, ConfigurationException, 
    TelegramAPIException, handle_exception
)
from state.state_manager import state_manager

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from handlers import commands, registration, admin
from handlers.course_editor import register_course_editor
from handlers.admin_actions import register_admin_actions, set_review_request_function
from handlers.reviews import register as register_reviews
import os
os.system('cls || clear')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger('bot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î
try:
    bot = TeleBot(API_TOKEN)
    init_db()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ë–î
    if migrate_database():
        logger.info("‚úÖ Database migration completed successfully")
    else:
        logger.warning("‚ö†Ô∏è Database migration failed, but bot will continue")
    
    logger.info("‚úÖ Bot and database initialized successfully")
except Exception as e:
    error_msg = handle_exception(e, logger, "Bot initialization")
    logger.error(f"‚ùå {error_msg}")
    raise

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—è–≤–æ–∫
try:
    start_monitoring(bot, logger)
    logger.info(f"‚úÖ Monitoring started with interval {CHECK_INTERVAL}s")
except Exception as e:
    error_msg = handle_exception(e, logger, "Monitoring startup")
    logger.error(f"‚ùå {error_msg}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
try:
    commands.register_handlers(bot)
    registration.register_handlers(bot)
    admin.register_handlers(bot)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    register_course_editor(bot, logger)
    register_admin_actions(bot, logger)
    send_review_request = register_reviews(bot, logger)  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è admin_actions
    set_review_request_function(send_review_request)
    
    logger.info("‚úÖ All handlers registered successfully")
except Exception as e:
    error_msg = handle_exception(e, logger, "Handler registration")
    logger.error(f"‚ùå {error_msg}")

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
log_bot_startup(logger)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    logger.info("üöÄ Starting bot polling...")
    bot.infinity_polling(timeout=30, long_polling_timeout=5)
except KeyboardInterrupt:
    logger.info("‚ö†Ô∏è Bot stopped by user (Ctrl+C)")
    log_bot_shutdown(logger)
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º StateManager
    state_manager.stop()
except Exception as e:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (Conflict: terminated by other getUpdates request)
    import telebot
    if isinstance(e, telebot.apihelper.ApiTelegramException) and '409' in str(e):
        logger.error("‚ùå [FATAL] 409 Conflict: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        print("‚ùå [FATAL] 409 Conflict: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        log_bot_shutdown(logger)
        state_manager.stop()
        import sys
        sys.exit(1)
    
    error_msg = handle_exception(e, logger, "Bot polling")
    logger.error(f"‚ùå {error_msg}")
    log_bot_shutdown(logger)
    state_manager.stop()

# === bot.py ===
"""
–í–ê–ñ–ù–û:
- –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º, –Ω–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–∞—Ö/—Å–µ—Ä–≤–µ—Ä–∞—Ö).
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ polling –∏ webhook! –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling (bot.infinity_polling).
- –ï—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (systemd, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫), —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
- –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É 409 Conflict ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python —Å —ç—Ç–∏–º –±–æ—Ç–æ–º.
"""
from telebot import TeleBot
from config import API_TOKEN, CHECK_INTERVAL
from data.db import init_db, migrate_database
from services.monitor import init_review_monitor, stop_review_monitor, init_lesson_reminder_monitor, stop_lesson_reminder_monitor
from utils.logger import setup_logger, log_bot_startup, log_bot_shutdown, log_error
from utils.exceptions import (
    BotException, DatabaseException, ConfigurationException, 
    TelegramAPIException, handle_exception
)
from state.state_manager import state_manager
from utils.cleanup import auto_cleanup

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from handlers import admin
from handlers.users import commands, registration, reviews
from handlers.admin import register_all_admin_handlers
from state.users import cleanup_expired_registrations
import threading
import time
import signal
import sys
import telebot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger('bot')

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    logger.info(f"Received signal {signum}, shutting down...")
    stop_review_monitor()
    stop_lesson_reminder_monitor()
    log_bot_shutdown(logger)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ FSM
    try:
        state_manager.stop()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FSM: {e}")
    
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î
try:
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    bot = TeleBot(API_TOKEN, parse_mode="HTML", threaded=False)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î
    from data.db import check_database_integrity
    is_ok, error_msg = check_database_integrity()
    
    if not is_ok:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {error_msg}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: {error_msg}")
    
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ë–î
    if migrate_database():
        logger.info("‚úÖ Database migration completed successfully")
    else:
        logger.warning("‚ö†Ô∏è Database migration failed, but bot will continue")
    
    logger.info("‚úÖ Bot and database initialized successfully")
except Exception as e:
    error_msg = handle_exception(e, logger, "Bot initialization")
    logger.error(f"‚ùå {error_msg}")
    raise

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞—è–≤–æ–∫
# try:
#     start_monitoring(bot, logger)
#     logger.info(f"‚úÖ Monitoring started with interval {CHECK_INTERVAL}s")
# except Exception as e:
#     error_msg = handle_exception(e, logger, "Monitoring startup")
#     logger.error(f"‚ùå {error_msg}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É
try:
    review_monitor = init_review_monitor(bot)
    lesson_reminder_monitor = init_lesson_reminder_monitor(bot)
    logger.info("‚úÖ Review and lesson reminder monitors initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize monitors: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
def cleanup_registrations_periodically():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    while True:
        try:
            time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            cleaned_count = cleanup_expired_registrations(timeout_minutes=30)
            if cleaned_count > 0:
                logger.info(f"üßπ Cleaned up {cleaned_count} expired registrations")
        except Exception as e:
            log_error(logger, e, "Error in registration cleanup")

# –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
try:
    cleanup_thread = threading.Thread(target=cleanup_registrations_periodically, daemon=True)
    cleanup_thread.start()
    logger.info("‚úÖ Registration cleanup thread started")
except Exception as e:
    error_msg = handle_exception(e, logger, "Registration cleanup startup")
    logger.error(f"‚ùå {error_msg}")

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
try:
    auto_cleanup.start_periodic_cleanup(interval_hours=6)  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    logger.info("‚úÖ Auto-cleanup thread started")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    logger.info("üîÑ Auto-cleanup started (every 6 hours)")
    
except Exception as e:
    error_msg = handle_exception(e, logger, "Auto-cleanup startup")
    logger.error(f"‚ùå {error_msg}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def log_system_stats():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    import time
    import psutil
    from data.db import get_pending_applications, get_assigned_applications
    
    while True:
        try:
            time.sleep(3600)  # –ö–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            pending_apps = len(get_pending_applications())
            assigned_apps = len(get_assigned_applications())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            memory_usage = psutil.Process().memory_info().rss / 1024 / 1024  # –ú–ë
            cpu_percent = psutil.Process().cpu_percent()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            logger.info(f"üìä System stats: {pending_apps} pending, {assigned_apps} assigned applications")
            logger.info(f"üíæ Memory usage: {memory_usage:.1f} MB, CPU: {cpu_percent:.1f}%")
            logger.info(f"üìä Daily stats: {pending_apps + assigned_apps} total applications in system")
            
        except Exception as e:
            logger.error(f"Error in system stats logging: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î
def periodic_database_integrity_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î"""
    from data.db import check_database_integrity
    
    while True:
        try:
            time.sleep(86400)  # –ö–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
            
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            is_ok, error_msg = check_database_integrity()
            
            if not is_ok:
                logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ë–î –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: {error_msg}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try:
                    from config import ADMIN_ID
                    bot.send_message(ADMIN_ID, f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ë–î!\n\n–ë–î –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: {error_msg}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")
            else:
                logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"Error in database integrity check: {e}")

# –ó–∞–ø—É—Å–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
try:
    stats_thread = threading.Thread(target=log_system_stats, daemon=True)
    stats_thread.start()
    logger.info("‚úÖ System stats logging thread started")
except Exception as e:
    logger.error(f"‚ùå Failed to start stats logging: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
try:
    integrity_thread = threading.Thread(target=periodic_database_integrity_check, daemon=True)
    integrity_thread.start()
    logger.info("‚úÖ Database integrity check thread started")
except Exception as e:
    logger.error(f"‚ùå Failed to start database integrity check: {e}")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö rate limit –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    from utils.security import clear_old_rate_limit_data
    clear_old_rate_limit_data()
    logger.info("‚úÖ Old rate limit data cleared")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Failed to clear old rate limit data: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–∫–ª—é—á–∞—è /start –¥–ª—è –∞–¥–º–∏–Ω–∞)
    try:
        admin.register_all_admin_handlers(bot, logger)
        logger.info("‚úÖ Admin handlers registered successfully")
    except Exception as e:
        logger.error(f"‚ùå Error registering admin handlers: {e}")
    
    # –ü–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    try:
        commands.register_handlers(bot)
        logger.info("‚úÖ User commands handlers registered successfully")
    except Exception as e:
        logger.error(f"‚ùå Error registering user commands handlers: {e}")
    
    try:
        registration.register_handlers(bot)
        logger.info("‚úÖ Registration handlers registered successfully")
    except Exception as e:
        logger.error(f"‚ùå Error registering registration handlers: {e}")
    
    try:
        reviews.register(bot, logger)
        logger.info("‚úÖ Reviews handlers registered successfully")
    except Exception as e:
        logger.error(f"‚ùå Error registering reviews handlers: {e}")
    
    logger.info("‚úÖ All handlers registered successfully")
except Exception as e:
    error_msg = handle_exception(e, logger, "Handler registration")
    logger.error(f"‚ùå {error_msg}")

# Fallback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def fallback_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
        if message.text and message.text.startswith('/'):
            bot.send_message(
                message.chat.id, 
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
        else:
            bot.send_message(
                message.chat.id, 
                "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
        
        logger.info(f"Fallback handler triggered for user {message.from_user.id}: {message.text[:50]}...")
        
    except Exception as e:
        logger.error(f"Error in fallback handler: {e}")

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
log_bot_startup(logger)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    logger.info("üöÄ Starting bot polling...")
    bot.infinity_polling(timeout=60, long_polling_timeout=60)
except KeyboardInterrupt:
    logger.info("‚ö†Ô∏è Bot stopped by user (Ctrl+C)")
    log_bot_shutdown(logger)
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º StateManager
    try:
        state_manager.stop()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FSM: {e}")
except Exception as e:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (Conflict: terminated by other getUpdates request)
    if isinstance(e, telebot.apihelper.ApiTelegramException) and '409' in str(e):
        logger.error("‚ùå [FATAL] 409 Conflict: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        print("‚ùå [FATAL] 409 Conflict: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≥–¥–µ-—Ç–æ –µ—â—ë! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        log_bot_shutdown(logger)
        try:
            state_manager.stop()
        except Exception as stop_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FSM: {stop_error}")
        sys.exit(1)
    
    error_msg = handle_exception(e, logger, "Bot polling")
    logger.error(f"‚ùå {error_msg}")
    log_error(logger, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling", e)
    log_bot_shutdown(logger)
    try:
        state_manager.stop()
    except Exception as stop_error:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ FSM: {stop_error}")

from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from utils.security import check_user_security, security_manager
from utils.logger import log_error, log_user_action
from typing import Callable, Any
import functools
from config import ADMIN_ID

def security_middleware(bot: TeleBot, logger):
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(message_or_call: Message | CallbackQuery, *args, **kwargs):
            try:
                # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if isinstance(message_or_call, Message):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.chat.id
                    action_type = "message"
                elif isinstance(message_or_call, CallbackQuery):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.message.chat.id
                    action_type = "callback"
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Message –∏ –Ω–µ CallbackQuery, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    return func(message_or_call, *args, **kwargs)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_ok, error_msg = check_user_security(user_id, action_type)
                if not security_ok:  
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    security_manager.record_suspicious_activity(user_id, f"blocked_{action_type}")
                    
                    if isinstance(message_or_call, Message):
                        bot.send_message(chat_id, f"üö´ {error_msg}")
                    elif isinstance(message_or_call, CallbackQuery):
                        bot.answer_callback_query(message_or_call.id, f"üö´ {error_msg}")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    log_user_action(logger, user_id, f"BLOCKED_{action_type}", f"Reason: {error_msg}")
                    return
                
                # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                return func(message_or_call, *args, **kwargs)
                
            except Exception as e:
                log_error(logger, e, f"Security middleware error for {func.__name__}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ middleware, –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                return func(message_or_call, *args, **kwargs)
        
        return wrapper
    return decorator

def admin_only_middleware(bot: TeleBot, logger):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(message_or_call: Message | CallbackQuery, *args, **kwargs):
            try:
                # –ü–æ–ª—É—á–∞–µ–º user_id
                if isinstance(message_or_call, Message):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.chat.id
                elif isinstance(message_or_call, CallbackQuery):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.message.chat.id
                else:
                    return func(message_or_call, *args, **kwargs)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if not is_admin(user_id):
                    error_msg = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"
                    if isinstance(message_or_call, Message):
                        bot.send_message(chat_id, f"üö´ {error_msg}")
                    elif isinstance(message_or_call, CallbackQuery):
                        bot.answer_callback_query(message_or_call.id, f"üö´ {error_msg}")
                    
                    log_user_action(logger, user_id, "UNAUTHORIZED_ADMIN_ACCESS", f"Function: {func.__name__}")
                    return
                
                return func(message_or_call, *args, **kwargs)
                
            except Exception as e:
                log_error(logger, e, f"Admin middleware error for {func.__name__}")
                return func(message_or_call, *args, **kwargs)
        
        return wrapper
    return decorator

def input_validation_middleware(bot: TeleBot, logger, validation_type: str = "message"):
    """Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(message: Message, *args, **kwargs):
            try:
                if not isinstance(message, Message):
                    return func(message, *args, **kwargs)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(message, 'text') and message.text:
                    from utils.security import validate_user_input
                    is_valid, error_msg = validate_user_input(message.text, validation_type)
                    if not is_valid:
                        bot.send_message(message.chat.id, f"‚ùå {error_msg}")
                        log_user_action(logger, message.from_user.id, "INVALID_INPUT", f"Type: {validation_type}, Error: {error_msg}")
                        return
                
                return func(message, *args, **kwargs)
                
            except Exception as e:
                log_error(logger, e, f"Input validation middleware error for {func.__name__}")
                return func(message, *args, **kwargs)
        
        return wrapper
    return decorator

def rate_limit_middleware(bot: TeleBot, logger, custom_limit: int = None):
    """Middleware –¥–ª—è rate limiting —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ª–∏–º–∏—Ç–æ–º"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(message_or_call: Message | CallbackQuery, *args, **kwargs):
            try:
                # –ü–æ–ª—É—á–∞–µ–º user_id
                if isinstance(message_or_call, Message):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.chat.id
                elif isinstance(message_or_call, CallbackQuery):
                    user_id = message_or_call.from_user.id
                    chat_id = message_or_call.message.chat.id
                else:
                    return func(message_or_call, *args, **kwargs)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
                if custom_limit:
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    original_limit = security_manager.rate_limit_data.get(user_id, [])
                    if len(original_limit) >= custom_limit:
                        error_msg = f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –õ–∏–º–∏—Ç: {custom_limit} –≤ –º–∏–Ω—É—Ç—É"
                        if isinstance(message_or_call, Message):
                            bot.send_message(chat_id, f"üö´ {error_msg}")
                        elif isinstance(message_or_call, CallbackQuery):
                            bot.answer_callback_query(message_or_call.id, f"üö´ {error_msg}")
                        return
                
                return func(message_or_call, *args, **kwargs)
                
            except Exception as e:
                log_error(logger, e, f"Rate limit middleware error for {func.__name__}")
                return func(message_or_call, *args, **kwargs)
        
        return wrapper
    return decorator

def log_activity_middleware(bot: TeleBot, logger, activity_name: str = None):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(message_or_call: Message | CallbackQuery, *args, **kwargs):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                if isinstance(message_or_call, Message):
                    user_id = message_or_call.from_user.id
                    username = message_or_call.from_user.username
                    text = message_or_call.text
                elif isinstance(message_or_call, CallbackQuery):
                    user_id = message_or_call.from_user.id
                    username = message_or_call.from_user.username
                    text = message_or_call.data
                else:
                    return func(message_or_call, *args, **kwargs)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                activity = activity_name or func.__name__
                log_user_action(logger, user_id, activity, f"Username: {username}, Input: {text}")
                
                return func(message_or_call, *args, **kwargs)
                
            except Exception as e:
                log_error(logger, e, f"Log activity middleware error for {func.__name__}")
                return func(message_or_call, *args, **kwargs)
        
        return wrapper
    return decorator

def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID) 
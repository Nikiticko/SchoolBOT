"""
–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
"""

class BotException(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    
    def __init__(self, message: str, error_code: str = None, details: dict = None):
        self.message = message
        self.error_code = error_code
        self.details = details or {}
        super().__init__(self.message)
    
    def __str__(self):
        if self.error_code:
            return f"[{self.error_code}] {self.message}"
        return self.message

class DatabaseException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, message: str, operation: str = None, table: str = None):
        super().__init__(message, "DB_ERROR", {
            "operation": operation,
            "table": table
        })

class DatabaseConnectionException(DatabaseException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    
    def __init__(self, message: str, db_path: str = None):
        super().__init__(message, "DB_CONNECTION_ERROR", {
            "db_path": db_path
        })

class DatabaseMigrationException(DatabaseException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î"""
    
    def __init__(self, message: str, migration_step: str = None):
        super().__init__(message, "DB_MIGRATION_ERROR", {
            "migration_step": migration_step
        })

class SecurityException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, message: str, user_id: int = None, action: str = None):
        super().__init__(message, "SECURITY_ERROR", {
            "user_id": user_id,
            "action": action
        })

class UserBannedException(SecurityException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, user_id: int, reason: str = None):
        super().__init__(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            "USER_BANNED",
            {"user_id": user_id, "reason": reason}
        )

class RateLimitException(SecurityException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit"""
    
    def __init__(self, user_id: int, remaining_time: int = None):
        super().__init__(
            f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            "RATE_LIMIT_EXCEEDED",
            {"user_id": user_id, "remaining_time": remaining_time}
        )

class ValidationException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self, message: str, field: str = None, value: str = None):
        super().__init__(message, "VALIDATION_ERROR", {
            "field": field,
            "value": value
        })

class ConfigurationException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, message: str, config_key: str = None):
        super().__init__(message, "CONFIG_ERROR", {
            "config_key": config_key
        })

class TelegramAPIException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ Telegram API"""
    
    def __init__(self, message: str, api_method: str = None, error_code: int = None):
        super().__init__(message, "TELEGRAM_API_ERROR", {
            "api_method": api_method,
            "telegram_error_code": error_code
        })

class StateException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º"""
    
    def __init__(self, message: str, state_key: str = None):
        super().__init__(message, "STATE_ERROR", {
            "state_key": state_key
        })

class HandlerException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self, message: str, handler_name: str = None, user_id: int = None):
        super().__init__(message, "HANDLER_ERROR", {
            "handler_name": handler_name,
            "user_id": user_id
        })

class MonitoringException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, message: str, monitoring_type: str = None):
        super().__init__(message, "MONITORING_ERROR", {
            "monitoring_type": monitoring_type
        })

class RegistrationException(BotException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    def __init__(self, message: str, error_code: str = "REGISTRATION_ERROR", details: dict = None):
        super().__init__(message, error_code, details)

class RegistrationTimeoutException(RegistrationException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, user_id: int, timeout_minutes: int = 30):
        super().__init__(
            f"–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ ({timeout_minutes} –º–∏–Ω—É—Ç)",
            "REGISTRATION_TIMEOUT",
            {"user_id": user_id, "timeout_minutes": timeout_minutes}
        )

class DuplicateApplicationException(RegistrationException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫"""
    
    def __init__(self, user_id: int, existing_app_id: int = None):
        super().__init__(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞",
            "DUPLICATE_APPLICATION",
            {"user_id": user_id, "existing_app_id": existing_app_id}
        )

class InvalidRegistrationStageException(RegistrationException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, user_id: int, expected_stage: str, actual_stage: str):
        super().__init__(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª—Å—è {expected_stage}, –ø–æ–ª—É—á–µ–Ω {actual_stage}",
            "INVALID_REGISTRATION_STAGE",
            {"user_id": user_id, "expected_stage": expected_stage, "actual_stage": actual_stage}
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def create_database_error(message: str, operation: str = None, table: str = None) -> DatabaseException:
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –ë–î"""
    return DatabaseException(message, operation, table)

def create_security_error(message: str, user_id: int = None, action: str = None) -> SecurityException:
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return SecurityException(message, user_id, action)

def create_validation_error(message: str, field: str = None, value: str = None) -> ValidationException:
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return ValidationException(message, field, value)

def create_telegram_error(message: str, api_method: str = None, error_code: int = None) -> TelegramAPIException:
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ Telegram API"""
    return TelegramAPIException(message, api_method, error_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def handle_exception(exception: Exception, logger, context: str = None) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        exception: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    if isinstance(exception, BotException):
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.error(f"[{exception.error_code}] {exception.message}", extra={
            "context": context,
            "details": exception.details
        })
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(exception, UserBannedException):
            return "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        elif isinstance(exception, RateLimitException):
            remaining = exception.details.get("remaining_time", 0)
            return f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥."
        elif isinstance(exception, ValidationException):
            return f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {exception.message}"
        elif isinstance(exception, DatabaseException):
            return "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif isinstance(exception, ConfigurationException):
            return "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        elif isinstance(exception, TelegramAPIException):
            return "‚ùå –û—à–∏–±–∫–∞ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif isinstance(exception, RegistrationTimeoutException):
            timeout = exception.details.get("timeout_minutes", 30)
            return f"‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ ({timeout} –º–∏–Ω—É—Ç). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        elif isinstance(exception, DuplicateApplicationException):
            return "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        elif isinstance(exception, InvalidRegistrationStageException):
            return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        elif isinstance(exception, RegistrationException):
            return f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {exception.message}"
        else:
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    else:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(exception)}", extra={
            "context": context,
            "exception_type": type(exception).__name__
        })
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." 
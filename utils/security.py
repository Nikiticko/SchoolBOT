import re
import time
from typing import Dict, Set, Optional, Any
from config import MAX_MESSAGE_LENGTH, MAX_NAME_LENGTH, RATE_LIMIT_PER_MINUTE, BAN_THRESHOLD
from utils.logger import log_error
from utils.security_logger import security_logger

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ rate limiting"""
    
    def __init__(self):
        self.rate_limit_data: Dict[int, list] = {}  # user_id -> [timestamps]
        self.banned_users: Set[int] = set()
        self.suspicious_activities: Dict[int, int] = {}  # user_id -> count
    
    def validate_message_length(self, text: str, max_length: int = MAX_MESSAGE_LENGTH) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not text or not isinstance(text, str):
            return False
        return len(text.strip()) <= max_length
    
    def validate_name(self, name: str, max_length: int = MAX_NAME_LENGTH) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not name or not isinstance(name, str):
            return False, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        name = name.strip()
        if len(name) > max_length:
            return False, f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã)
        if not re.match(r'^[–∞-—è—ëa-z\s\-]+$', name.lower()):
            return False, "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if len(name) < 2:
            return False, "–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"
        
        return True, ""
    
    def validate_age(self, age: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        if not age or not isinstance(age, str):
            return False, "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        age = age.strip()
        if not age.isdigit():
            return False, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        age_num = int(age)
        if age_num < 3 or age_num > 100:
            return False, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 –ª–µ—Ç"
        
        return True, ""
    
    def validate_phone(self, phone: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        if not phone:
            return True, ""  # –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        phone = phone.strip()
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        digits_only = re.sub(r'\D', '', phone)
        
        if len(digits_only) < 10 or len(digits_only) > 15:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        
        return True, ""
    
    def validate_telegram_username(self, username: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è Telegram username"""
        if not username:
            return True, ""  # Username –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        
        username = username.strip()
        if not username.startswith('@'):
            username = '@' + username
        
        # Telegram username: 5-32 —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if not re.match(r'^@[a-zA-Z0-9_]{5,32}$', username):
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username"
        
        return True, ""
    
    def check_rate_limit(self, user_id: int) -> tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        
        if user_id not in self.rate_limit_data:
            self.rate_limit_data[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        self.rate_limit_data[user_id] = [
            timestamp for timestamp in self.rate_limit_data[user_id]
            if current_time - timestamp < 60
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.rate_limit_data[user_id]) >= RATE_LIMIT_PER_MINUTE:
            remaining_time = int(60 - (current_time - self.rate_limit_data[user_id][0]))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ rate limit
            security_logger.log_rate_limit_exceeded(
                user_id, 
                "unknown", 
                RATE_LIMIT_PER_MINUTE, 
                60
            )
            
            return False, remaining_time
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.rate_limit_data[user_id].append(current_time)
        return True, 0
    
    def is_user_banned(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        return user_id in self.banned_users
    
    def ban_user(self, user_id: int, reason: str = "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.banned_users.add(user_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–Ω
        security_logger.log_user_banned(user_id, "unknown", reason, "system")
        
        print(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    
    def record_suspicious_activity(self, user_id: int, activity_type: str):
        """–ó–∞–ø–∏—Å—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = 0
        
        self.suspicious_activities[user_id] += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        security_logger.log_suspicious_activity(
            user_id, 
            "unknown", 
            activity_type, 
            f"Count: {self.suspicious_activities[user_id]}/{BAN_THRESHOLD}"
        )
        
        if self.suspicious_activities[user_id] >= BAN_THRESHOLD:
            self.ban_user(user_id, f"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {activity_type}")
            return True
        
        return False
    
    def sanitize_input(self, text: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not text:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[<>"\']', '', text)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        return text.strip()
    
    def validate_course_name(self, course_name: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
        if not course_name or not isinstance(course_name, str):
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        course_name = course_name.strip()
        if len(course_name) > 100:
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
        
        if len(course_name) < 3:
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ"
        
        return True, ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security_manager = SecurityManager()

def validate_user_input(text: str, input_type: str = "message") -> tuple[bool, str]:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        if not text or not isinstance(text, str):
            return False, "–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö"
        
        # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
        sanitized_text = security_manager.sanitize_input(text)
        
        if input_type == "name":
            return security_manager.validate_name(sanitized_text)
        elif input_type == "age":
            return security_manager.validate_age(sanitized_text)
        elif input_type == "phone":
            return security_manager.validate_phone(sanitized_text)
        elif input_type == "username":
            return security_manager.validate_telegram_username(sanitized_text)
        elif input_type == "course":
            return security_manager.validate_course_name(sanitized_text)
        else:
            return security_manager.validate_message_length(sanitized_text)
    
    except Exception as e:
        log_error(None, e, f"Error in validate_user_input for type {input_type}")
        return False, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"

def check_user_security(user_id: int, action_type: str = "message") -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
        if security_manager.is_user_banned(user_id):
            return False, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        rate_ok, remaining_time = security_manager.check_rate_limit(user_id)
        if not rate_ok:
            return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥"
        
        return True, ""
    
    except Exception as e:
        log_error(None, e, f"Error in check_user_security for user {user_id}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"

def log_security_event(user_id: int, username: str, event_type: str, details: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        if details is None:
            details = {}
        security_logger.log_security_event(event_type, user_id, username, details)
    except Exception as e:
        log_error(None, e, f"Error logging security event for user {user_id}") 
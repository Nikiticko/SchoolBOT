"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –Ω–µ –≤–ª–∏—è—è –Ω–∞ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
"""

import os
import glob
import time
import threading
from datetime import datetime, timedelta
from utils.logger import setup_logger

class AutoCleanup:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
    """
    
    def __init__(self):
        self.logger = setup_logger('auto_cleanup')
        self.safe_patterns = [
            "*.xlsx",           # Excel —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
            "*.log.*",          # –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (–Ω–µ —Ç–µ–∫—É—â–∏–π bot.log)
            "state/*.tmp",      # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        ]
        self.max_age_hours = 24  # –£–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        self.critical_files = [
            "database.db",      # –û—Å–Ω–æ–≤–Ω–∞—è –ë–î
            "state.json",       # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            "bot.log",          # –¢–µ–∫—É—â–∏–π –ª–æ–≥
            "config.env",       # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            "requirements.txt", # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        ]
        
    def cleanup_safe_files(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            cleaned_count = 0
            total_size = 0
            
            for pattern in self.safe_patterns:
                files = glob.glob(pattern)
                for file_path in files:
                    if self._is_safe_to_delete(file_path):
                        try:
                            file_size = os.path.getsize(file_path)
                            os.remove(file_path)
                            cleaned_count += 1
                            total_size += file_size
                            self.logger.info(f"üßπ Auto-cleanup: removed {file_path}")
                        except Exception as e:
                            self.logger.error(f"‚ùå Failed to remove {file_path}: {e}")
            
            if cleaned_count > 0:
                size_mb = total_size / (1024 * 1024)
                self.logger.info(f"‚úÖ Auto-cleanup completed: {cleaned_count} files removed, {size_mb:.2f} MB freed")
            else:
                self.logger.info("‚úÖ Auto-cleanup: no files to remove")
                
        except Exception as e:
            self.logger.error(f"‚ùå Auto-cleanup error: {e}")
    
    def _is_safe_to_delete(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª"""
        try:
            filename = os.path.basename(file_path)
            
            # –ù–µ —É–¥–∞–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            if any(critical in filename for critical in self.critical_files):
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
            file_age = time.time() - os.path.getmtime(file_path)
            max_age_seconds = self.max_age_hours * 3600
            
            if file_age < max_age_seconds:
                return False
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            if self._is_file_in_use(file_path):
                return False
                
            return True
            
        except Exception as e:
            self.logger.error(f"Error checking file {file_path}: {e}")
            return False
    
    def _is_file_in_use(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –Ω–∞ –∑–∞–ø–∏—Å—å (—ç—Ç–æ –ø–æ–∫–∞–∂–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –æ–Ω)
            with open(file_path, 'a'):
                pass
            return False
        except (PermissionError, OSError):
            # –§–∞–π–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            return True
    
    def get_cleanup_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"""
        try:
            stats = {
                'total_files': 0,
                'total_size': 0,
                'files_to_clean': 0,
                'size_to_free': 0
            }
            
            for pattern in self.safe_patterns:
                files = glob.glob(pattern)
                for file_path in files:
                    try:
                        file_size = os.path.getsize(file_path)
                        stats['total_files'] += 1
                        stats['total_size'] += file_size
                        
                        if self._is_safe_to_delete(file_path):
                            stats['files_to_clean'] += 1
                            stats['size_to_free'] += file_size
                    except:
                        continue
            
            return stats
            
        except Exception as e:
            self.logger.error(f"Error getting cleanup stats: {e}")
            return stats
    
    def start_periodic_cleanup(self, interval_hours=6):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É"""
        def cleanup_loop():
            self.logger.info(f"üîÑ Auto-cleanup started (every {interval_hours} hours)")
            while True:
                try:
                    time.sleep(interval_hours * 3600)
                    self.cleanup_safe_files()
                except Exception as e:
                    self.logger.error(f"Error in cleanup loop: {e}")
                    time.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        cleanup_thread = threading.Thread(target=cleanup_loop, daemon=True)
        cleanup_thread.start()
        self.logger.info(f"‚úÖ Auto-cleanup thread started successfully")
    
    def manual_cleanup(self):
        """–†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self.logger.info("üßπ Manual cleanup started")
        self.cleanup_safe_files()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
auto_cleanup = AutoCleanup() 
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import json
import os
import threading
import time
from typing import Dict, Any, Optional, Set
from datetime import datetime, timedelta
from utils.logger import setup_logger

class StateManager:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∏ thread-safety
    """
    
    def __init__(self, storage_file: str = "state/state.json", auto_save_interval: int = 300):
        self.storage_file = storage_file
        self.auto_save_interval = auto_save_interval
        self.logger = setup_logger('state_manager')
        
        # Thread-safe —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self._lock = threading.RLock()
        self._state = {
            "user_data": {},           # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            "chat_contact_map": {},    # Telegram ID ‚Üî –ö–æ–Ω—Ç–∞–∫—Ç
            "pending": {},             # –û–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            "writing_ids": set(),      # ID –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            "rate_limit_data": {},     # –î–∞–Ω–Ω—ã–µ rate limiting
            "banned_users": set(),     # –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            "suspicious_activities": {} # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self._last_save = time.time()
        self._save_thread = None
        self._running = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self._load_state()
        self._start_auto_save()
    
    def _load_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.storage_file):
                with open(self.storage_file, 'r', encoding='utf-8') as f:
                    loaded_state = json.load(f)
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                for key, value in loaded_state.items():
                    if key in self._state:
                        if key in ["writing_ids", "banned_users"]:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                            self._state[key] = set(value)
                        else:
                            self._state[key] = value
                
                self.logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {self.storage_file}")
            else:
                self.logger.info("üìù –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(self.storage_file), exist_ok=True)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_data = {}
            with self._lock:
                for key, value in self._state.items():
                    if isinstance(value, set):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
                        save_data[key] = list(value)
                    else:
                        save_data[key] = value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏
            temp_file = f"{self.storage_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(save_data, f, ensure_ascii=False, indent=2)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            os.replace(temp_file, self.storage_file)
            self._last_save = time.time()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _start_auto_save(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        self._running = True
        self._save_thread = threading.Thread(target=self._auto_save_loop, daemon=True)
        self._save_thread.start()
    
    def _auto_save_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        while self._running:
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if time.time() - self._last_save > self.auto_save_interval:
                self._save_state()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        self._running = False
        if self._save_thread:
            self._save_thread.join(timeout=5)
        self._save_state()
        self.logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å user_data
    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            return self._state["user_data"].get(str(user_id), {})
    
    def set_user_data(self, user_id: int, data: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            self._state["user_data"][str(user_id)] = data
    
    def update_user_data(self, user_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            user_id_str = str(user_id)
            if user_id_str not in self._state["user_data"]:
                self._state["user_data"][user_id_str] = {}
            self._state["user_data"][user_id_str].update(kwargs)
    
    def clear_user_data(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            self._state["user_data"].pop(str(user_id), None)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å chat_contact_map
    def get_chat_contact(self, chat_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞"""
        with self._lock:
            return self._state["chat_contact_map"].get(str(chat_id))
    
    def set_chat_contact(self, chat_id: int, contact: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞"""
        with self._lock:
            self._state["chat_contact_map"][str(chat_id)] = contact
    
    def remove_chat_contact(self, chat_id: int):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —á–∞—Ç–∞"""
        with self._lock:
            self._state["chat_contact_map"].pop(str(chat_id), None)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å pending
    def add_pending(self, user_id: int, data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        with self._lock:
            self._state["pending"][str(user_id)] = data
    
    def get_pending(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        with self._lock:
            return self._state["pending"].get(str(user_id))
    
    def remove_pending(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        with self._lock:
            self._state["pending"].pop(str(user_id), None)
    
    def get_all_pending(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with self._lock:
            return self._state["pending"].copy()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å writing_ids
    def add_writing_id(self, app_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç ID –∑–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        with self._lock:
            self._state["writing_ids"].add(app_id)
    
    def remove_writing_id(self, app_id: int):
        """–£–¥–∞–ª—è–µ—Ç ID –∑–∞—è–≤–∫–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        with self._lock:
            self._state["writing_ids"].discard(app_id)
    
    def is_writing_id(self, app_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∑–∞—è–≤–∫–∞"""
        with self._lock:
            return app_id in self._state["writing_ids"]
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å rate_limit_data
    def get_rate_limit_data(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            return self._state["rate_limit_data"].get(str(user_id), [])
    
    def set_rate_limit_data(self, user_id: int, timestamps: list):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            self._state["rate_limit_data"][str(user_id)] = timestamps
    
    def clear_rate_limit_data(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            self._state["rate_limit_data"].pop(str(user_id), None)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å banned_users
    def add_banned_user(self, user_id: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω"""
        with self._lock:
            self._state["banned_users"].add(user_id)
    
    def remove_banned_user(self, user_id: int):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω–∞"""
        with self._lock:
            self._state["banned_users"].discard(user_id)
    
    def is_user_banned(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        with self._lock:
            return user_id in self._state["banned_users"]
    
    def get_banned_users(self) -> Set[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with self._lock:
            return self._state["banned_users"].copy()
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å suspicious_activities
    def get_suspicious_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self._lock:
            return self._state["suspicious_activities"].get(str(user_id), 0)
    
    def increment_suspicious_count(self, user_id: int):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        with self._lock:
            user_id_str = str(user_id)
            current = self._state["suspicious_activities"].get(user_id_str, 0)
            self._state["suspicious_activities"][user_id_str] = current + 1
    
    def clear_suspicious_count(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        with self._lock:
            self._state["suspicious_activities"].pop(str(user_id), None)
    
    # –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        with self._lock:
            return {
                "user_data_count": len(self._state["user_data"]),
                "chat_contact_count": len(self._state["chat_contact_map"]),
                "pending_count": len(self._state["pending"]),
                "writing_ids_count": len(self._state["writing_ids"]),
                "banned_users_count": len(self._state["banned_users"]),
                "suspicious_activities_count": len(self._state["suspicious_activities"]),
                "last_save": datetime.fromtimestamp(self._last_save).isoformat()
            }
    
    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤!)"""
        with self._lock:
            self._state = {
                "user_data": {},
                "chat_contact_map": {},
                "pending": {},
                "writing_ids": set(),
                "rate_limit_data": {},
                "banned_users": set(),
                "suspicious_activities": {}
            }
        self._save_state()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_manager = StateManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_user_data(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return state_manager.get_user_data(user_id)

def set_user_data(user_id: int, data: Dict[str, Any]):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    state_manager.set_user_data(user_id, data)

def get_pending() -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return state_manager.get_all_pending()

def get_writing_ids() -> Set[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    with state_manager._lock:
        return state_manager._state["writing_ids"].copy() 
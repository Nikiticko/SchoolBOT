import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '7906419182:AAFkvUNgQpbgAka959-gC1oL0WGvq58SPJs'
bot = telebot.TeleBot(TOKEN)

scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open("–ó–∞—è–≤–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ").sheet1

user_data = {}
user_contacts = {}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def normalize_phone(phone: str) -> str:
    digits = ''.join(filter(str.isdigit, phone))
    if len(digits) == 11 and digits[0] == '8':
        digits = '7' + digits[1:]
    return digits

def is_contact_registered(contact_value: str) -> bool:
    contact_value = contact_value.strip()
    all_contacts = [str(row.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "")).strip() for row in sheet.get_all_records()]
    for existing in all_contacts:
        existing = existing.strip()
        if existing.startswith('@') and contact_value.startswith('@'):
            if existing.lower() == contact_value.lower():
                return True
        elif not any(c.isalpha() for c in existing):
            if normalize_phone(existing) == normalize_phone(contact_value):
                return True
    return False

def save_application(name: str, age: str, goal: str, contact: str):
    sheet.append_row([name, age, goal, contact, "-"])

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    contact_value = user_contacts.get(chat_id, "")
    found = False
    has_lesson = False

    for row in sheet.get_all_records():
        if contact_value == row.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", ""):
            found = True
            if row.get("–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è", "") not in ["", "-"]:
                has_lesson = True
            break

    if found:
        if has_lesson:
            markup.row("üìÖ –ú–æ–π —É—Ä–æ–∫", "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
        else:
            markup.row("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
    else:
        markup.row("üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ")
        markup.row("üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã", "‚≠ê –û—Ç–∑—ã–≤—ã")
        markup.row("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# === /start ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data.pop(chat_id, None)
    username = message.from_user.username
    contact_value = f"@{username}" if username else str(chat_id)
    user_contacts[chat_id] = contact_value
    if is_contact_registered(contact_value):
        bot.send_message(chat_id, "üìù –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=types.ReplyKeyboardRemove())
    else:
        greeting = ("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –ø–æ Python.\n"
                    "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        bot.send_message(chat_id, greeting, parse_mode="Markdown")
        main_menu(chat_id)

# === –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
@bot.message_handler(content_types=['text', 'contact'])
def registration_steps(msg):
    chat_id = msg.chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if chat_id not in user_data:
        return

    step_data = user_data[chat_id]

    if 'name' not in step_data and msg.content_type == 'text':
        step_data['name'] = msg.text.strip()
        bot.send_message(chat_id, "üìÖ –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return

    if 'age' not in step_data and msg.content_type == 'text':
        step_data['age'] = msg.text.strip()
        bot.send_message(chat_id, "üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠/–ï–ì–≠, –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å)")
        return

    if 'goal' not in step_data and msg.content_type == 'text':
        step_data['goal'] = msg.text.strip()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button)
        bot.send_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=markup)
        return

    if 'goal' in step_data and 'phone' not in step_data and msg.content_type == 'contact':
        contact = msg.contact
        if contact.user_id != msg.from_user.id:
            bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –°–í–û–ô –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
            return
        phone_number = contact.phone_number
        if phone_number:
            step_data['phone'] = normalize_phone(phone_number)
            save_application(step_data['name'], step_data['age'], step_data['goal'], step_data['phone'])
            bot.send_message(chat_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ, {step_data['name']}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=types.ReplyKeyboardRemove())
            user_data.pop(chat_id, None)
            main_menu(chat_id)
        else:
            bot.send_message(chat_id, "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# === /help ===
@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id,
                     "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n"
                     "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                     "/help ‚Äî –ø–æ–º–æ—â—å\n"
                     "/price ‚Äî —Ü–µ–Ω—ã\n")

# === /price ===
@bot.message_handler(commands=['price'])
def price(message):
    show_price(message.chat.id)

# === –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===
@bot.message_handler(func=lambda m: m.text in ["üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ", "üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã", "‚≠ê –û—Ç–∑—ã–≤—ã", "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã", "üìÖ –ú–æ–π —É—Ä–æ–∫"])
def menu_handler(message):
    chat_id = message.chat.id
    text = message.text

    if text == "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è":
        contact_value = user_contacts.get(chat_id, f"@{message.from_user.username}" if message.from_user.username else str(chat_id))
        if is_contact_registered(contact_value):
            bot.send_message(chat_id, "üìù –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        else:
            user_data[chat_id] = {}
            bot.send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë *–∏–º—è*:", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())

    elif text == "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ":
        bot.send_message(chat_id, "üßë‚Äçüíº –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ù–∏–∫–∏—Ç–∞\n"
                                  "üë®‚Äçüíª 3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞ –≤ Python\n"
                                  "üéì –†–∞–±–æ—Ç–∞—é —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –æ—Ç 10 –¥–æ 18 –ª–µ—Ç\n"
                                  "üìà –ü–æ–º–æ–≥–∞—é –ø–æ–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É")

    elif text == "üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã":
        show_price(chat_id)

    elif text == "‚≠ê –û—Ç–∑—ã–≤—ã":
        bot.send_message(chat_id, "üì¢ –û—Ç–∑—ã–≤—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ üòä")

    elif text == "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã":
        bot.send_message(chat_id,
                         "üìò *–ö—É—Ä—Å—ã:*\n"
                         "‚Ä¢ Python —Å –Ω—É–ª—è (10‚Äì14 –ª–µ—Ç)\n"
                         "‚Ä¢ –®–∫–æ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠/–û–ì–≠)\n\n"
                         "–ö–∞–∂–¥—ã–π –∫—É—Ä—Å –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
                         parse_mode="Markdown")

    elif text == "üìÖ –ú–æ–π —É—Ä–æ–∫":
        contact_value = user_contacts.get(chat_id)
        for row in sheet.get_all_records():
            if contact_value == row.get("–ö–æ–Ω—Ç–∞–∫—Ç—ã", ""):
                date = row.get("–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è", "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
                bot.send_message(chat_id, f"üìÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å: {date}")
                return
        bot.send_message(chat_id, "üîç –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ \"üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è\".")

# === –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã ===
def show_price(chat_id):
    bot.send_message(chat_id,
                     "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:\n"
                     "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ ‚Äî 600‚ÇΩ/–∑–∞–Ω—è—Ç–∏–µ\n"
                     "‚Ä¢ –í –≥—Ä—É–ø–ø–µ (–¥–æ 4 —á–µ–ª) ‚Äî 400‚ÇΩ/–∑–∞–Ω—è—Ç–∏–µ\n\n"
                     "üìÖ –§–æ—Ä–º–∞—Ç—ã:\n"
                     "‚Ä¢ –û–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Zoom / Discord\n"
                     "‚Ä¢ –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –º–∏–Ω–∏-–ø—Ä–æ–µ–∫—Ç—ã\n"
                     "‚Ä¢ –£—Ä–æ–≤–Ω–∏: —Å –Ω—É–ª—è / –ï–ì–≠ / –ø—Ä–æ–µ–∫—Ç—ã",
                     parse_mode='Markdown')

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)

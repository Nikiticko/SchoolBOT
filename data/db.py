import sqlite3
from datetime import datetime
import re

DB_NAME = "data/database.db"

def parse_date_string(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM HH:MM' –≤ datetime –æ–±—ä–µ–∫—Ç"""
    if not date_str or date_str == 'None':
        return None
    
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "22.06 17:30"
        if '.' in date_str and ':' in date_str:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            date_part, time_part = date_str.split(' ')
            day, month = date_part.split('.')
            hour, minute = time_part.split(':')
            
            # –¢–µ–∫—É—â–∏–π –≥–æ–¥
            current_year = datetime.now().year
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
            dt = datetime(current_year, int(month), int(day), int(hour), int(minute))
            
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
            if dt < datetime.now():
                dt = datetime(current_year + 1, int(month), int(day), int(hour), int(minute))
            
            return dt
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}': {e}")
        return None

def format_date_for_display(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM HH:MM'"""
    if not dt:
        return "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
    
    if isinstance(dt, str):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        dt = parse_date_string(dt)
        if not dt:
            return dt
    
    return dt.strftime("%d.%m %H:%M")

def get_connection():
    import os
    path = os.path.abspath(DB_NAME)
    print(f"üõ† –ü—É—Ç—å –∫ –±–∞–∑–µ, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç: {path}")
    return sqlite3.connect(DB_NAME)


def init_db():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tg_id TEXT,
                parent_name TEXT,
                student_name TEXT,
                age TEXT,
                contact TEXT,
                course TEXT,
                lesson_date DATETIME,
                lesson_link TEXT,
                status TEXT DEFAULT '–û–∂–∏–¥–∞–µ—Ç',
                created_at DATETIME DEFAULT (datetime('now', 'localtime'))
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS courses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                active BOOLEAN DEFAULT 1
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_applications_lesson_date ON applications(lesson_date)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_applications_status ON applications(status)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_applications_created_at ON applications(created_at)")
        
        conn.commit()


def add_application(tg_id, parent_name, student_name, age, contact, course):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO applications (tg_id, parent_name, student_name, age, contact, course)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (tg_id, parent_name, student_name, age, contact, course))
        conn.commit()

def get_application_by_tg_id(tg_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM applications
            WHERE tg_id = ?
            ORDER BY created_at DESC LIMIT 1
        """, (tg_id,))
        return cursor.fetchone()

def get_pending_applications():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM applications
            WHERE status = '–û–∂–∏–¥–∞–µ—Ç'
            ORDER BY created_at DESC
        """)
        return cursor.fetchall()

def update_application_lesson(app_id, lesson_date, lesson_link):
    with get_connection() as conn:
        cursor = conn.cursor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ datetime –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(lesson_date, str):
            lesson_date = parse_date_string(lesson_date)
        
        cursor.execute("""
            UPDATE applications
            SET lesson_date = ?, lesson_link = ?, status = '–ù–∞–∑–Ω–∞—á–µ–Ω–æ'
            WHERE id = ?
        """, (lesson_date, lesson_link, app_id))
        conn.commit()

# === –ö–£–†–°–´ ===
# === –ö–£–†–°–´ ===

def get_active_courses():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM courses WHERE active = 1 ORDER BY id DESC")
        return cursor.fetchall()


def get_all_courses():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM courses ORDER BY id DESC")
        return cursor.fetchall()

def add_course(name, description):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO courses (name, description, active)
            VALUES (?, ?, 1)
        """, (name, description))
        conn.commit()

def delete_course(course_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM courses WHERE id = ?", (course_id,))
        conn.commit()

def update_course(course_id, new_name, new_description):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE courses SET name = ?, description = ?
            WHERE id = ?
        """, (new_name, new_description, course_id))
        conn.commit()

def toggle_course_active(course_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE courses
            SET active = NOT active
            WHERE id = ?
        """, (course_id,))
        conn.commit()




def clear_applications():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM applications")
        conn.commit()



def get_application_by_id(app_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
        return cursor.fetchone()


def update_application_status(app_id, new_status):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE applications
            SET status = ?
            WHERE id = ?
        """, (new_status, app_id))
        conn.commit()

def get_assigned_applications():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT * FROM applications
            WHERE status = '–ù–∞–∑–Ω–∞—á–µ–Ω–æ'
            ORDER BY created_at DESC
        """)
        return cursor.fetchall()

def cancel_assigned_lesson(app_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE applications
            SET lesson_date = NULL,
                lesson_link = NULL,
                status = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            WHERE id = ?
        """, (app_id,))
        conn.commit()


def archive_application(app_id: int, cancelled_by="user", comment="", archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"):
    with get_connection() as conn:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        cursor.execute("SELECT * FROM applications WHERE id = ?", (app_id,))
        row = cursor.fetchone()
        if not row:
            print("[‚ùå] archive_application: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ archive
        try:
            cursor.execute("""
                INSERT INTO archive (
                    tg_id, parent_name, student_name, age, contact, course,
                    lesson_date, lesson_link, status, created_at,
                    cancelled_by, comment
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                row[1], row[2], row[3], row[4], row[5], row[6],
                row[7], row[8], archived_status, row[10],
                cancelled_by, comment
            ))
        except Exception as e:
            print("üî• [FATAL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ archive:", e)
            print("üî• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", (
                row[1], row[2], row[3], row[4], row[5], row[6],
                row[7], row[8], archived_status, row[10],
                cancelled_by, comment
            ))
            raise

        # –£–¥–∞–ª—è–µ–º –∏–∑ applications
        cursor.execute("DELETE FROM applications WHERE id = ?", (app_id,))
        conn.commit()
        return True





def get_archive_count_by_tg_id(tg_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM archive WHERE tg_id = ?", (tg_id,))
        return cursor.fetchone()[0]


def clear_archive():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM archive")
        conn.commit()

def validate_date_format(date_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É 'DD.MM HH:MM'"""
    if not date_str or not isinstance(date_str, str):
        return False, "–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    
    date_str = date_str.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú –ß–ß:–ú–ú (—Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏)
    if not re.match(r'^\d{2}\.\d{2}\s+\d{2}:\d{2}$', date_str):
        return False, "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:30)"
    
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞—Ç—É
        date_part, time_part = date_str.split(' ')
        day, month = date_part.split('.')
        hour, minute = time_part.split(':')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        day = int(day)
        month = int(month)
        hour = int(hour)
        minute = int(minute)
        
        if not (1 <= day <= 31):
            return False, "–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31"
        
        if not (1 <= month <= 12):
            return False, "–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12"
        
        if not (0 <= hour <= 23):
            return False, "–ß–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 23"
        
        if not (0 <= minute <= 59):
            return False, "–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 59"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        current_year = datetime.now().year
        test_date = datetime(current_year, month, day, hour, minute)
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
        if test_date < datetime.now():
            test_date = datetime(current_year + 1, month, day, hour, minute)
        
        return True, test_date
        
    except ValueError as e:
        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {str(e)}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã: {str(e)}"

def get_all_applications():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã applications."""
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM applications ORDER BY created_at DESC")
        return cursor.fetchall()

def get_all_archive():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM archive ORDER BY created_at DESC")
        return cursor.fetchall()

def get_cancelled_count_by_tg_id(tg_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ç—É—Å—ã '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω')."""
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM archive WHERE tg_id = ? AND (status = '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞' OR status = '–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω')", (tg_id,))
        return cursor.fetchone()[0]

def get_finished_count_by_tg_id(tg_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ç—É—Å '–ó–∞–≤–µ—Ä—à–µ–Ω–æ')."""
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM archive WHERE tg_id = ? AND status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'", (tg_id,))
        return cursor.fetchone()[0]

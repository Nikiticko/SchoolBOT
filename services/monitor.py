import threading
import time
from datetime import datetime, timedelta
from telebot import types
from data.db import (
    get_lessons_completed_after_time, 
    mark_review_request_sent,
    has_user_reviewed_application,
    get_application_by_id,
    get_upcoming_lessons,
    mark_reminder_sent,
    format_date_for_display
)
from utils.logger import setup_logger

logger = setup_logger('review_monitor')

class ReviewRequestMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"""
    
    def __init__(self, bot):
        self.bot = bot
        self.is_running = False
        self.monitor_thread = None
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.delay_after_lesson = 0.5  # 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            logger.warning("Review monitor is already running")
            return
            
        self.is_running = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("Review request monitor started")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä"""
        self.is_running = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("Review request monitor stopped")
        
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                self._check_and_send_review_requests()
                time.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Error in review monitor loop: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                
    def _check_and_send_review_requests(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ü–µ–Ω–∫—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
            completed_lessons = get_lessons_completed_after_time(self.delay_after_lesson)
            
            if not completed_lessons:
                return
                
            logger.info(f"Found {len(completed_lessons)} lessons eligible for review requests")
            
            for lesson in completed_lessons:
                app_id, tg_id, course, lesson_date, lesson_link = lesson
                
                try:
                    self._send_review_request(app_id, tg_id, course)
                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    try:
                        mark_review_request_sent(app_id)
                    except Exception as e:
                        logger.error(f"Failed to mark review request sent for application {app_id}: {e}")
                    logger.info(f"Review request sent for application {app_id}")
                    
                except Exception as e:
                    logger.error(f"Failed to send review request for application {app_id}: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"Error checking review requests: {e}")
            
    def _send_review_request(self, app_id, tg_id, course):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
            if has_user_reviewed_application(app_id, tg_id):
                logger.info(f"User {tg_id} already reviewed application {app_id}")
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = (
                f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —É—Ä–æ–∫–µ!\n\n"
                f"üìò –ö—É—Ä—Å: {course}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–Ω—è—Ç–∏–∏. "
                f"–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"start_review:{app_id}"),
                types.InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_review")
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.send_message(tg_id, msg, reply_markup=markup)
            
        except Exception as e:
            logger.error(f"Error sending review request to user {tg_id}: {e}")
            raise
            
    def send_immediate_review_request(self, app_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            app_data = get_application_by_id(app_id)
            if not app_data:
                logger.error(f"Application {app_id} not found")
                return False
                
            tg_id = app_data[1]
            course = app_data[6]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
            if has_user_reviewed_application(app_id, tg_id):
                logger.info(f"User {tg_id} already reviewed application {app_id}")
                return False
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self._send_review_request(app_id, tg_id, course)
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            try:
                mark_review_request_sent(app_id)
            except Exception as e:
                logger.error(f"Failed to mark review request sent for application {app_id}: {e}")
            logger.info(f"Immediate review request sent for application {app_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending immediate review request for application {app_id}: {e}")
            return False
            
    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            from data.db import get_database_stats
            stats = get_database_stats()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–µ
            stats.update({
                'monitor_running': self.is_running,
                'check_interval_seconds': self.check_interval,
                'delay_after_lesson_hours': self.delay_after_lesson
            })
            
            return stats
            
        except Exception as e:
            logger.error(f"Error getting monitor stats: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
review_monitor = None

def init_review_monitor(bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É"""
    global review_monitor
    review_monitor = ReviewRequestMonitor(bot)
    review_monitor.start()
    return review_monitor

def get_review_monitor():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    return review_monitor

def stop_review_monitor():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ü–µ–Ω–∫—É"""
    global review_monitor
    if review_monitor:
        review_monitor.stop()
        review_monitor = None

class LessonReminderMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —É—Ä–æ–∫–∞—Ö –∑–∞ 30 –º–∏–Ω—É—Ç"""
    def __init__(self, bot):
        self.bot = bot
        self.is_running = False
        self.monitor_thread = None
        self.check_interval = 120  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        self.reminder_minutes = 30

    def start(self):
        if self.is_running:
            logger.warning("Lesson reminder monitor is already running")
            return
        self.is_running = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("Lesson reminder monitor started")

    def stop(self):
        self.is_running = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("Lesson reminder monitor stopped")

    def _monitor_loop(self):
        while self.is_running:
            try:
                self._check_and_send_reminders()
                time.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"Error in lesson reminder monitor loop: {e}")
                time.sleep(60)

    def _check_and_send_reminders(self):
        try:
            lessons = get_upcoming_lessons(self.reminder_minutes)
            if not lessons:
                return
            logger.info(f"Found {len(lessons)} lessons for reminders")
            for lesson in lessons:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = lesson
                try:
                    formatted_date = format_date_for_display(lesson_date)
                    msg = (
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –í–∞—à —É—Ä–æ–∫ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ.\n"
                        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                        f"üìò –ö—É—Ä—Å: {course}\n"
                        f"üîó –°—Å—ã–ª–∫–∞: {lesson_link}"
                    )
                    self.bot.send_message(tg_id, msg)
                    try:
                        mark_reminder_sent(app_id)
                    except Exception as e:
                        logger.error(f"Failed to mark reminder sent for application {app_id}: {e}")
                    logger.info(f"[REMINDER] Sent to user {tg_id} for lesson {app_id}")
                except Exception as e:
                    logger.error(f"[REMINDER] Failed to send to {tg_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking reminders: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
lesson_reminder_monitor = None

def init_lesson_reminder_monitor(bot):
    global lesson_reminder_monitor
    lesson_reminder_monitor = LessonReminderMonitor(bot)
    lesson_reminder_monitor.start()
    return lesson_reminder_monitor

def stop_lesson_reminder_monitor():
    global lesson_reminder_monitor
    if lesson_reminder_monitor:
        lesson_reminder_monitor.stop()
        lesson_reminder_monitor = None

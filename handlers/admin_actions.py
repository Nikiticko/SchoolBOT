from telebot import types
from data.db import (
    get_assigned_applications,
    get_pending_applications,
    update_application_status,
    cancel_assigned_lesson,
    update_application_lesson,
    get_application_by_id,
    archive_application,
    format_date_for_display,
    validate_date_format
)
from state.users import writing_ids
from handlers.admin import is_admin
cancel_reasons_buffer = {}


def register_admin_actions(bot, logger):

    @bot.message_handler(func=lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É" and is_admin(m.from_user.id))
    def handle_finish_request(message):
        try:
            apps = get_assigned_applications()
            if not apps:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–∞–∑–Ω–∞—á–µ–Ω–æ'")
                return

            for app in apps:
                app_id, _, parent_name, student_name, _, _, course, date, link, _, _ = app
                formatted_date = format_date_for_display(date)
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {link}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed applications to finish")
        except Exception as e:
            logger.error(f"Error in handle_finish_request: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("finish:"))
    def handle_finish_status(call):
        try:
            app_id = int(call.data.split(":")[1])
            update_application_status(app_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
            bot.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
            logger.info(f"Admin {call.from_user.id} finished application {app_id}")
        except Exception as e:
            logger.error(f"Error in handle_finish_status: {e}")

    @bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É" and is_admin(m.from_user.id))
    def handle_cancel_request(message):
        try:
            apps = get_pending_applications()
            if not apps:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
                return

            for app in apps:
                app_id, _, parent_name, student_name, _, _, course, _, _, _, _ = app
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìò –ö—É—Ä—Å: {course}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed applications to cancel")
        except Exception as e:
            logger.error(f"Error in handle_cancel_request: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("cancel:"))
    def handle_cancel_status(call):
        try:
            app_id = int(call.data.split(":")[1])
            cancel_reasons_buffer[call.from_user.id] = {
                "app_id": app_id,
                "chat_id": call.message.chat.id,
                "msg_id": call.message.message_id
            }
            bot.send_message(call.message.chat.id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:")
            logger.info(f"Admin {call.from_user.id} started canceling application {app_id}")
        except Exception as e:
            logger.error(f"Error in handle_cancel_status: {e}")

    @bot.message_handler(func=lambda m: m.from_user.id in cancel_reasons_buffer)
    def receive_cancel_reason(message):
        try:
            user_id = message.from_user.id
            reason = message.text.strip()
            info = cancel_reasons_buffer.pop(user_id)

            app_id = info["app_id"]
            chat_id = info["chat_id"]
            msg_id = info["msg_id"]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –î–û –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            app = get_application_by_id(app_id)
            if not app:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            success = archive_application(app_id, cancelled_by="admin", cancel_reason=reason, archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            if success:
                bot.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", chat_id, msg_id)
                bot.send_message(chat_id, "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                tg_id = app[1]
                try:
                    bot.send_message(int(tg_id), "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.")
                    logger.info(f"Notification sent to user {tg_id} about application cancellation")
                except Exception as e:
                    logger.error(f"Failed to notify user {tg_id}: {e}")
                
                logger.info(f"Admin {user_id} cancelled application {app_id} with reason: {reason}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Error in receive_cancel_reason: {e}")

    lesson_cancel_buffer = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º app_id –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞

    @bot.message_handler(func=lambda m: m.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫" and is_admin(m.from_user.id))
    def handle_cancel_lesson_request(message):
        try:
            apps = get_assigned_applications()
            if not apps:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
                return

            for app in apps:
                app_id, tg_id, parent_name, student_name, _, _, course, date, link, _, _ = app
                formatted_date = format_date_for_display(date)
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {link}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data=f"cancel_lesson:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed lessons to cancel")
        except Exception as e:
            logger.error(f"Error in handle_cancel_lesson_request: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_lesson:"))
    def handle_cancel_lesson(call):
        try:
            app_id = int(call.data.split(":")[1])
            lesson_cancel_buffer[call.from_user.id] = {
                "app_id": app_id,
                "chat_id": call.message.chat.id,
                "msg_id": call.message.message_id
            }
            bot.send_message(call.message.chat.id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞:")
            logger.info(f"Admin {call.from_user.id} started canceling lesson for application {app_id}")
        except Exception as e:
            logger.error(f"Error in handle_cancel_lesson: {e}")

    @bot.message_handler(func=lambda m: m.from_user.id in lesson_cancel_buffer)
    def receive_lesson_cancel_reason(message):
        try:
            user_id = message.from_user.id
            reason = message.text.strip()
            info = lesson_cancel_buffer.pop(user_id)

            app_id = info["app_id"]
            chat_id = info["chat_id"]
            msg_id = info["msg_id"]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –î–û –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            app = get_application_by_id(app_id)
            if not app:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            success = archive_application(app_id, cancelled_by="admin", cancel_reason=reason, archived_status="–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")

            if success:
                bot.edit_message_text("üö´ –£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω –∏ –∑–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", chat_id, msg_id)
                bot.send_message(chat_id, "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                tg_id = app[1]
                try:
                    bot.send_message(int(tg_id), "‚ö†Ô∏è –í–∞—à —É—Ä–æ–∫ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")
                    logger.info(f"Notification sent to user {tg_id} about lesson cancellation")
                except Exception as e:
                    logger.error(f"Failed to notify user {tg_id}: {e}")
                
                logger.info(f"Admin {user_id} cancelled lesson for application {app_id} with reason: {reason}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"Error in receive_lesson_cancel_reason: {e}")

    @bot.message_handler(func=lambda m: m.text == "üïì –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É—Ä–æ–∫" and is_admin(m.from_user.id))
    def handle_reschedule_lesson(message):
        try:
            apps = get_assigned_applications()
            if not apps:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
                return

            for app in apps:
                app_id, tg_id, parent_name, student_name, _, _, course, date, link, _, _ = app
                formatted_date = format_date_for_display(date)
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {formatted_date}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {link}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üïì –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed applications to reschedule")
        except Exception as e:
            logger.error(f"Error in handle_reschedule_lesson: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("reschedule:"))
    def handle_reschedule_callback(call):
        app_id = int(call.data.split(":")[1])
        writing_ids.add(call.from_user.id)
        bot.send_message(call.message.chat.id, f"üïì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:30):")
        bot.register_next_step_handler(call.message, lambda m: get_new_date(m, app_id))

    def get_new_date(message, app_id):
        if message.from_user.id not in writing_ids:
            return
        
        date_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        is_valid, result = validate_date_format(date_text)
        
        if not is_valid:
            bot.send_message(
                message.chat.id, 
                f"‚ùå {result}\n\nüìÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:30):"
            )
            bot.register_next_step_handler(message, lambda m: get_new_date(m, app_id))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        user_data['valid_date'] = result
        message._user_data = user_data
        
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:")
        bot.register_next_step_handler(message, lambda m: apply_reschedule(m, app_id, date_text))

    def apply_reschedule(message, app_id, date_text):
        if message.from_user.id not in writing_ids:
            return
        
        link = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        valid_date = user_data.get('valid_date')
        
        if valid_date:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É (datetime –æ–±—ä–µ–∫—Ç)
            update_application_lesson(app_id, valid_date, link)
            formatted_date = format_date_for_display(valid_date)
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
            update_application_lesson(app_id, date_text, link)
            formatted_date = date_text
        
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞:\nüìÖ {formatted_date}\nüîó {link}")

        app = get_application_by_id(app_id)
        if app:
            tg_id = app[1]
            course = app[6]
            try:
                bot.send_message(
                    int(tg_id),
                    f"üîÑ –í–∞—à —É—Ä–æ–∫ –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω!\nüìò –ö—É—Ä—Å: {course}\nüóì –ù–æ–≤–∞—è –¥–∞—Ç–∞: {formatted_date}\nüîó –°—Å—ã–ª–∫–∞: {link}"
                )
            except Exception as e:
                print(f"[‚ùó] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {tg_id}: {e}")

        writing_ids.discard(message.from_user.id)


from telebot import types
from data.db import (
    get_assigned_applications,
    get_pending_applications,
    update_application_status,
    cancel_assigned_lesson,
    update_application_lesson,
    get_application_by_id,
    archive_application
)
from state.users import writing_ids
from handlers.admin import is_admin
cancel_reasons_buffer = {}


def register_admin_actions(bot):

    @bot.message_handler(func=lambda m: m.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É" and is_admin(m.from_user.id))
    def handle_finish_request(message):
        apps = get_assigned_applications()
        if not apps:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–ù–∞–∑–Ω–∞—á–µ–Ω–æ'")
            return

        for app in apps:
            app_id, _, parent_name, student_name, _, _, course, date, link, _, _ = app
            text = (
                f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish:{app_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("finish:"))
    def handle_finish_status(call):
        app_id = int(call.data.split(":")[1])
        update_application_status(app_id, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
        bot.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", call.message.chat.id, call.message.message_id)

    @bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É" and is_admin(m.from_user.id))
    def handle_cancel_request(message):
        apps = get_pending_applications()
        if not apps:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
            return

        for app in apps:
            app_id, _, parent_name, student_name, _, _, course, _, _, _, _ = app
            text = (
                f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel:{app_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("cancel:"))
    def handle_cancel_status(call):
        app_id = int(call.data.split(":")[1])
        cancel_reasons_buffer[call.from_user.id] = {
            "app_id": app_id,
            "chat_id": call.message.chat.id,
            "msg_id": call.message.message_id
        }
        bot.send_message(call.message.chat.id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:")

    @bot.message_handler(func=lambda m: m.from_user.id in cancel_reasons_buffer)
    def receive_cancel_reason(message):
        user_id = message.from_user.id
        reason = message.text.strip()
        info = cancel_reasons_buffer.pop(user_id)

        app_id = info["app_id"]
        chat_id = info["chat_id"]
        msg_id = info["msg_id"]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –î–û –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            app = get_application_by_id(app_id)
            if not app:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            success = archive_application(app_id, cancelled_by="admin", cancel_reason=reason, archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

            if success:
                bot.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", chat_id, msg_id)
                bot.send_message(chat_id, "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                tg_id = app[1]
                try:
                    bot.send_message(int(tg_id), "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.")
                    print(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tg_id}")
                except Exception as e:
                    print(f"[‚ùó] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")

    lesson_cancel_buffer = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º app_id –¥–ª—è –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞


    @bot.message_handler(func=lambda m: m.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫" and is_admin(m.from_user.id))
    def handle_cancel_lesson_request(message):
        apps = get_assigned_applications()
        if not apps:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
            return

        for app in apps:
            app_id, tg_id, parent_name, student_name, _, _, course, date, link, _, _ = app
            text = (
                f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data=f"cancel_lesson:{app_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)


    @bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_lesson:"))
    def handle_cancel_lesson(call):
        print(f"[DEBUG] cancel_lesson –Ω–∞–∂–∞—Ç–∞: {call.data}")
        try:
            app_id = int(call.data.split(":")[1])
            lesson_cancel_buffer[call.from_user.id] = {
                "app_id": app_id,
                "chat_id": call.message.chat.id,
                "msg_id": call.message.message_id
            }
            bot.send_message(call.message.chat.id, "‚ùì –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞:")
        except Exception as e:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ –≤ handle_cancel_lesson: {e}")


    @bot.message_handler(func=lambda m: m.from_user.id in lesson_cancel_buffer)
    def receive_lesson_cancel_reason(message):
        user_id = message.from_user.id
        reason = message.text.strip()
        info = lesson_cancel_buffer.pop(user_id)

        app_id = info["app_id"]
        chat_id = info["chat_id"]
        msg_id = info["msg_id"]

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –î–û –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
            app = get_application_by_id(app_id)
            if not app:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            success = archive_application(app_id, cancelled_by="admin", cancel_reason=reason, archived_status="–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")

            if success:
                bot.edit_message_text("üö´ –£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω –∏ –∑–∞—è–≤–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", chat_id, msg_id)
                bot.send_message(chat_id, "‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                tg_id = app[1]
                try:
                    bot.send_message(int(tg_id), "‚ö†Ô∏è –í–∞—à —É—Ä–æ–∫ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")
                    print(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tg_id}")
                except Exception as e:
                    print(f"[‚ùó] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {tg_id}: {e}")
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞: {e}")


     

    @bot.message_handler(func=lambda m: m.text == "üïì –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —É—Ä–æ–∫" and is_admin(m.from_user.id))
    def handle_reschedule_lesson(message):
        apps = get_assigned_applications()
        if not apps:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤")
            return

        for app in apps:
            app_id, tg_id, parent_name, student_name, _, _, course, date, link, _, _ = app
            text = (
                f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {link}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üïì –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"reschedule:{app_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("reschedule:"))
    def handle_reschedule_callback(call):
        app_id = int(call.data.split(":")[1])
        writing_ids.add(call.from_user.id)
        bot.send_message(call.message.chat.id, f"üïì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:30):")
        bot.register_next_step_handler(call.message, lambda m: get_new_date(m, app_id))

    def get_new_date(message, app_id):
        if message.from_user.id not in writing_ids:
            return
        date_text = message.text.strip()
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:")
        bot.register_next_step_handler(message, lambda m: apply_reschedule(m, app_id, date_text))

    def apply_reschedule(message, app_id, date_text):
        if message.from_user.id not in writing_ids:
            return
        link = message.text.strip()
        update_application_lesson(app_id, date_text, link)
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞:\nüìÖ {date_text}\nüîó {link}")

        app = get_application_by_id(app_id)
        if app:
            tg_id = app[1]
            course = app[6]
            try:
                bot.send_message(
                    int(tg_id),
                    f"üîÑ –í–∞—à —É—Ä–æ–∫ –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω!\nüìò –ö—É—Ä—Å: {course}\nüóì –ù–æ–≤–∞—è –¥–∞—Ç–∞: {date_text}\nüîó –°—Å—ã–ª–∫–∞: {link}"
                )
            except Exception as e:
                print(f"[‚ùó] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ {tg_id}: {e}")

        writing_ids.discard(message.from_user.id)


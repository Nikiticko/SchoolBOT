# === handlers/commands.py ===
from telebot import types
from utils.menu import get_main_menu, get_admin_menu
from data.db import get_application_by_tg_id, format_date_for_display, get_active_courses, get_cancelled_count_by_tg_id, get_finished_count_by_tg_id, get_all_archive
from handlers.admin import is_admin
from utils.logger import log_user_action, log_error


def register(bot, logger):  

    @bot.message_handler(commands=["start"])
    def handle_start(message):
        try:
            if is_admin(message.from_user.id):
                markup = get_admin_menu()
                welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é:"
            else:
                markup = get_main_menu()
                welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            bot.send_message(
                message.chat.id,
                welcome,
                reply_markup=markup
            )
            log_user_action(logger, message.from_user.id, "start_command")
        except Exception as e:
            log_error(logger, e, f"Start command for user {message.from_user.id}")

    def _handle_my_lesson_logic(chat_id, show_menu=False):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω
            if get_cancelled_count_by_tg_id(str(chat_id)) >= 2:
                return "üö´ –£ –≤–∞—Å 2 –∏–ª–∏ –±–æ–ª–µ–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–æ–≤. –ó–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_menu

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            if get_finished_count_by_tg_id(str(chat_id)) >= 1:
                # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ –∞—Ä—Ö–∏–≤–µ
                archive = get_all_archive()
                for row in archive:
                    if row[1] == str(chat_id) and row[9] == '–ó–∞–≤–µ—Ä—à–µ–Ω–æ':
                        course = row[6]
                        student_name = row[3]
                        parent_name = row[2]
                        lesson_date = format_date_for_display(row[7])
                        comment = row[12]
                        msg = f"‚úÖ –í–∞—à –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –∫—É—Ä—Å—É '{course}' –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_name} ({parent_name}) –Ω–∞ {lesson_date} —É–∂–µ –ø—Ä–æ—à—ë–ª.\n\n–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {comment}"
                        return msg, show_menu
                return "‚úÖ –í–∞—à –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ—à—ë–ª.", show_menu

            app = get_application_by_tg_id(str(chat_id))
            if not app:
                return "–í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ ¬´üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª.", show_menu
            course = app[6]
            date = app[7]
            link = app[8]
            if date and link:
                formatted_date = format_date_for_display(date)
                msg = f"üìÖ –î–∞—Ç–∞: {formatted_date}\nüìò –ö—É—Ä—Å: {course}\nüîó –°—Å—ã–ª–∫–∞: {link}"
            else:
                msg = "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞."
            return msg, show_menu
        except Exception as e:
            log_error(logger, e, f"My lesson logic for user {chat_id}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏.", show_menu

    @bot.message_handler(commands=["my_lesson"])
    def handle_my_lesson_command(message):
        try:
            msg, _ = _handle_my_lesson_logic(message.chat.id)
            bot.send_message(message.chat.id, msg)
            log_user_action(logger, message.from_user.id, "my_lesson_command")
        except Exception as e:
            log_error(logger, e, f"My lesson command for user {message.from_user.id}")

    @bot.message_handler(commands=["help"])
    def handle_help(message):
        try:
            help_text = (
                "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/my_lesson - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º –∑–∞–Ω—è—Ç–∏–∏\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            bot.send_message(message.chat.id, help_text)
            log_user_action(logger, message.from_user.id, "help_command")
        except Exception as e:
            log_error(logger, e, f"Help command for user {message.from_user.id}")

    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    def handle_my_lesson_button(message):
        try:
            msg, show_menu = _handle_my_lesson_logic(message.chat.id, show_menu=True)
            if show_menu:
                bot.send_message(message.chat.id, msg, reply_markup=get_main_menu())
            else:
                bot.send_message(message.chat.id, msg)
            log_user_action(logger, message.from_user.id, "my_lesson_button")
        except Exception as e:
            log_error(logger, e, f"My lesson button for user {message.from_user.id}")

    @bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ")
    def handle_about(message):
        try:
            bot.send_message(message.chat.id, "üßë‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: –ù–∏–∫–∏—Ç–∞\n–û–ø—ã—Ç: 3 –≥–æ–¥–∞\nPython –¥–ª—è –¥–µ—Ç–µ–π 10‚Äì18 –ª–µ—Ç")
            log_user_action(logger, message.from_user.id, "about_teacher")
        except Exception as e:
            log_error(logger, e, f"About teacher for user {message.from_user.id}")

    @bot.message_handler(func=lambda m: m.text == "üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã")
    def handle_prices(message):
        try:
            bot.send_message(message.chat.id, "üí∞ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ: 600‚ÇΩ\nüë• –ì—Ä—É–ø–ø–∞: 400‚ÇΩ\n–§–æ—Ä–º–∞—Ç: Zoom/Discord")
            log_user_action(logger, message.from_user.id, "prices_info")
        except Exception as e:
            log_error(logger, e, f"Prices info for user {message.from_user.id}")

    @bot.message_handler(func=lambda m: m.text == "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
    def handle_courses(message):
        try:
            courses = get_active_courses()
            if not courses:
                bot.send_message(message.chat.id, "–ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                return

            markup = types.InlineKeyboardMarkup()
            for course in courses:
                course_id, name, description, active = course
                markup.add(types.InlineKeyboardButton(name, callback_data=f"course_info:{course_id}"))

            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å:", reply_markup=markup)
            log_user_action(logger, message.from_user.id, "courses_list", f"available: {len(courses)}")
        except Exception as e:
            log_error(logger, e, f"Courses list for user {message.from_user.id}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_info:"))
    def show_course_info(call):
        try:
            course_id = int(call.data.split(":")[1])
            courses = get_active_courses()
            course = next((c for c in courses if c[0] == course_id), None)

            if course:
                name = course[1]
                description = course[2]
                msg = f"üìò *{name}*\n\nüìù {description}"
                bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=get_main_menu(call.message.chat.id))
                log_user_action(logger, call.from_user.id, "course_info_viewed", f"course: {name}")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu(call.message.chat.id))
                log_user_action(logger, call.from_user.id, "course_not_found", f"course_id: {course_id}")
        except Exception as e:
            log_error(logger, e, f"Course info for user {call.from_user.id}")

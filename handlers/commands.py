# === handlers/commands.py ===
from telebot import types
import utils.menu as menu
from data.db import get_application_by_tg_id, format_date_for_display, get_active_courses, get_cancelled_count_by_tg_id, get_finished_count_by_tg_id, get_all_archive, archive_application, is_user_banned, get_last_contact_time, add_contact, get_ban_reason
from handlers.admin import is_admin
from utils.logger import log_user_action, log_error
from state.users import user_data
from config import ADMIN_ID


def register(bot, logger):  

    @bot.message_handler(commands=["start"])
    def handle_start(message):
        try:
            if is_admin(message.from_user.id):
                markup = menu.get_admin_menu()
                welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é:"
            else:
                markup = menu.get_main_menu()
                welcome = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.\n\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            bot.send_message(
                message.chat.id,
                welcome,
                reply_markup=markup
            )
            log_user_action(logger, message.from_user.id, "start_command")
        except Exception as e:
            log_error(logger, e, f"Start command for user {message.from_user.id}")

    def _handle_my_lesson_logic(chat_id, show_menu=False):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω
            if get_cancelled_count_by_tg_id(str(chat_id)) >= 2:
                return "üö´ –£ –≤–∞—Å 2 –∏–ª–∏ –±–æ–ª–µ–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–æ–≤. –ó–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_menu

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            if get_finished_count_by_tg_id(str(chat_id)) >= 1:
                # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ –∞—Ä—Ö–∏–≤–µ
                archive = get_all_archive()
                for row in archive:
                    if row[1] == str(chat_id) and row[9] == '–ó–∞–≤–µ—Ä—à–µ–Ω–æ':
                        course = row[6]
                        student_name = row[3]
                        parent_name = row[2]
                        lesson_date = format_date_for_display(row[7])
                        comment = row[12]
                        msg = f"‚úÖ –í–∞—à –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ –∫—É—Ä—Å—É '{course}' –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_name} ({parent_name}) –Ω–∞ {lesson_date} —É–∂–µ –ø—Ä–æ—à—ë–ª.\n\n–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {comment}"
                        return msg, show_menu
                return "‚úÖ –í–∞—à –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —É–∂–µ –ø—Ä–æ—à—ë–ª.", show_menu

            app = get_application_by_tg_id(str(chat_id))
            if not app:
                return "–í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ ¬´üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª.", show_menu
            course = app[6]
            date = app[7]
            link = app[8]
            status = app[9]
            if status != "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏ –∫–Ω–æ–ø–∫–∏
                parent_name = app[2]
                student_name = app[3]
                age = app[4]
                contact = app[5]
                course = app[6]
                msg = (
                    f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit_application"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_application")
                )
                bot.send_message(chat_id, msg, reply_markup=markup)
                return
            if date and link:
                formatted_date = format_date_for_display(date)
                msg = f"üìÖ –î–∞—Ç–∞: {formatted_date}\nüìò –ö—É—Ä—Å: {course}\nüîó –°—Å—ã–ª–∫–∞: {link}"
            else:
                msg = "üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞."
            return msg, show_menu
        except Exception as e:
            log_error(logger, e, f"My lesson logic for user {chat_id}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏.", show_menu

    @bot.message_handler(commands=["my_lesson"])
    def handle_my_lesson_command(message):
        try:
            msg, _ = _handle_my_lesson_logic(message.chat.id)
            bot.send_message(message.chat.id, msg)
            log_user_action(logger, message.from_user.id, "my_lesson_command")
        except Exception as e:
            log_error(logger, e, f"My lesson command for user {message.from_user.id}")

    @bot.message_handler(commands=["help"])
    def handle_help(message):
        try:
            help_text = (
                "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/my_lesson - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–µ–º –∑–∞–Ω—è—Ç–∏–∏\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "üìû –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            bot.send_message(message.chat.id, help_text)
            log_user_action(logger, message.from_user.id, "help_command")
        except Exception as e:
            log_error(logger, e, f"Help command for user {message.from_user.id}")

    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    def handle_my_lesson_button(message):
        chat_id = message.chat.id
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "–í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ ¬´üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª.", reply_markup=menu.get_main_menu())
            return
        course, date, link = app[6], app[7], app[8]
        if not date and not link:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏ –∫–Ω–æ–ø–∫–∏
            parent_name = app[2]
            student_name = app[3]
            age = app[4]
            contact = app[5]
            course = app[6]
            msg = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit_application"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_application")
            )
            bot.send_message(chat_id, msg, reply_markup=markup)
            return
        # –ï—Å–ª–∏ —É—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞
        if date and link:
            formatted_date = format_date_for_display(date)
            msg = f"üìÖ –î–∞—Ç–∞: {formatted_date}\nüìò –ö—É—Ä—Å: {course}\nüîó –°—Å—ã–ª–∫–∞: {link}"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫", callback_data="cancel_lesson_user"))
            bot.send_message(chat_id, msg, reply_markup=markup)
            return

    @bot.callback_query_handler(func=lambda c: c.data == "edit_application")
    def handle_edit_application(call):
        chat_id = call.message.chat.id
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        parent_name = app[2]
        student_name = app[3]
        age = app[4]
        contact = app[5]
        course = app[6]
        user = call.from_user
        fields = [
            ("–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è", "parent_name"),
            ("–ò–º—è —É—á–µ–Ω–∏–∫–∞", "student_name"),
            ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
            ("–ö—É—Ä—Å", "course")
        ]
        # –ö–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ username
        if not user.username:
            fields.append(("–ö–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)", "contact"))
        markup = types.InlineKeyboardMarkup()
        for label, key in fields:
            markup.add(types.InlineKeyboardButton(label, callback_data=f"edit_field:{key}"))
        bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
        user_data[chat_id] = {
            "edit_app": True,
            "app_id": app[0],
            "parent_name": parent_name,
            "student_name": student_name,
            "age": age,
            "contact": contact,
            "course": course
        }

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_field:"))
    def handle_edit_field(call):
        chat_id = call.message.chat.id
        field = call.data.split(":")[1]
        prompts = {
            "parent_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:",
            "student_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:",
            "age": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
            "course": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:",
            "contact": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        }
        if field == "course":
            courses = get_active_courses()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for c in courses:
                markup.add(c[1])
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            bot.send_message(chat_id, prompts[field], reply_markup=markup)
        else:
            bot.send_message(chat_id, prompts[field], reply_markup=menu.get_cancel_button())
        user_data[chat_id]["edit_field"] = field
        bot.register_next_step_handler(call.message, process_edit_field)

    def process_edit_field(message):
        chat_id = message.chat.id
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_main_menu())
            user_data.pop(chat_id, None)
            return
        field = user_data[chat_id].get("edit_field")
        value = message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if field == "age":
            if not value.isdigit() or not (3 <= int(value) <= 99):
                bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 99.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field == "course":
            courses = [c[1] for c in get_active_courses()]
            if value not in courses:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field in ("parent_name", "student_name"):
            if not value or not value.replace(" ", "").isalpha():
                bot.send_message(chat_id, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field == "contact":
            import re
            if not re.match(r"^\+?\d{10,15}$", value):
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +)")
                return bot.register_next_step_handler(message, process_edit_field)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        user_data[chat_id][field] = value
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        app = user_data[chat_id]
        msg = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app['parent_name']}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {app['student_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app['age']}\n"
            f"üìò –ö—É—Ä—Å: {app['course']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {app['contact'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_edit_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit_application"))
        bot.send_message(chat_id, msg, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_edit_application")
    def handle_confirm_edit_application(call):
        chat_id = call.message.chat.id
        app = user_data.get(chat_id)
        if not app:
            bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        import sqlite3
        conn = sqlite3.connect("data/database.db")
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE applications SET parent_name=?, student_name=?, age=?, contact=?, course=? WHERE id=?
        """, (app["parent_name"], app["student_name"], app["age"], app["contact"], app["course"], app["app_id"]))
        conn.commit()
        conn.close()
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
        bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=menu.get_main_menu())
        from handlers.admin import notify_admin_new_application
        notify_admin_new_application(bot, app)
        user_data.pop(chat_id, None)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_edit_application")
    def handle_cancel_edit_application(call):
        chat_id = call.message.chat.id
        user_data.pop(chat_id, None)
        bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_main_menu())

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_application")
    def handle_cancel_application(call):
        chat_id = call.message.chat.id
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:", reply_markup=menu.get_cancel_button())
        user_data[chat_id] = user_data.get(chat_id, {})
        user_data[chat_id]["cancel_stage"] = True
        bot.register_next_step_handler(call.message, process_cancel_reason)

    def process_cancel_reason(message):
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_main_menu())
            user_data.pop(chat_id, None)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_application"))
        user_data[chat_id]["cancel_reason"] = reason
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_application")
    def handle_confirm_cancel_application(call):
        chat_id = call.message.chat.id
        from data.db import get_application_by_tg_id, archive_application
        app = get_application_by_tg_id(str(chat_id))
        reason = user_data.get(chat_id, {}).get("cancel_reason", "")
        if app:
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        import sqlite3
        conn = sqlite3.connect("data/database.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM applications WHERE tg_id = ?", (str(chat_id),))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu.get_main_menu())
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        parent_name = app[2] if app else '-'
        student_name = app[3] if app else '-'
        course = app[6] if app else '-'
        msg = (
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
            f"üìò –ö—É—Ä—Å: {course}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        bot.send_message(ADMIN_ID, msg)
        user_data.pop(chat_id, None)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_application")
    def handle_cancel_cancel_application(call):
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_main_menu())
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_info:"))
    def show_course_info(call):
        try:
            course_id = int(call.data.split(":")[1])
            courses = get_active_courses()
            course = next((c for c in courses if c[0] == course_id), None)

            if course:
                name = course[1]
                description = course[2]
                msg = f"üìò *{name}*\n\nüìù {description}"
                bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=menu.get_main_menu(call.message.chat.id))
                log_user_action(logger, call.from_user.id, "course_info_viewed", f"course: {name}")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu.get_main_menu(call.message.chat.id))
                log_user_action(logger, call.from_user.id, "course_not_found", f"course_id: {course_id}")
        except Exception as e:
            log_error(logger, e, f"Course info for user {call.from_user.id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_lesson_user")
    def handle_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞:", reply_markup=menu.get_cancel_button())
        user_data[chat_id] = user_data.get(chat_id, {})
        user_data[chat_id]["cancel_lesson_stage"] = True
        bot.register_next_step_handler(call.message, process_cancel_lesson_reason)

    def process_cancel_lesson_reason(message):
        chat_id = message.chat.id
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_main_menu())
            user_data.pop(chat_id, None)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_lesson_user"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_lesson_user"))
        user_data[chat_id]["cancel_lesson_reason"] = reason
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_lesson_user")
    def handle_confirm_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        from data.db import get_application_by_tg_id, archive_application
        app = get_application_by_tg_id(str(chat_id))
        reason = user_data.get(chat_id, {}).get("cancel_lesson_reason", "")
        if app:
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
            import sqlite3
            conn = sqlite3.connect("data/database.db")
            cursor = conn.cursor()
            cursor.execute("DELETE FROM applications WHERE tg_id = ?", (str(chat_id),))
            conn.commit()
            conn.close()
            bot.send_message(chat_id, "–í–∞—à —É—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=menu.get_main_menu())
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            parent_name = app[2] if app else '-'
            student_name = app[3] if app else '-'
            course = app[6] if app else '-'
            msg = (
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É—Ä–æ–∫\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            bot.send_message(ADMIN_ID, msg)
        user_data.pop(chat_id, None)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_lesson_user")
    def handle_cancel_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_main_menu())

    @bot.message_handler(func=lambda m: m.text == "üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É")
    def handle_contact_admin(message):
        from data.db import is_user_banned, get_last_contact_time, add_contact
        import datetime
        chat_id = message.chat.id
        user = message.from_user
        if is_user_banned(str(chat_id)):
            reason = get_ban_reason(str(chat_id))
            msg = "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è."
            if reason:
                msg += f"\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            bot.send_message(chat_id, msg, reply_markup=menu.get_main_menu())
            return
        last_time = get_last_contact_time(str(chat_id))
        if last_time:
            last_dt = datetime.datetime.fromisoformat(last_time)
            if (datetime.datetime.now() - last_dt).total_seconds() < 20*60:
                bot.send_message(chat_id, "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç.", reply_markup=menu.get_main_menu())
                return
        bot.send_message(chat_id, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'.", reply_markup=menu.get_cancel_button())
        user_data[chat_id] = {"contact_fsm": True}
        bot.register_next_step_handler(message, process_contact_message)

    def process_contact_message(message):
        from data.db import add_contact
        chat_id = message.chat.id
        user = message.from_user
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_main_menu())
            user_data.pop(chat_id, None)
            return
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        contact = f"@{user.username}" if user.username else (user_data.get(chat_id, {}).get("phone") or str(chat_id))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        file_id = None
        file_type = None
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_type = 'photo'
        elif message.content_type == 'document':
            file_id = message.document.file_id
            file_type = 'document'
        elif message.content_type == 'voice':
            file_id = message.voice.file_id
            file_type = 'voice'
        elif message.content_type == 'video':
            file_id = message.video.file_id
            file_type = 'video'
        elif message.content_type == 'video_note':
            file_id = message.video_note.file_id
            file_type = 'video_note'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if file_id:
            msg_text = f"[–í–ª–æ–∂–µ–Ω–∏–µ: {file_type}, file_id: {file_id}]\n" + (message.caption or "")
        else:
            msg_text = message.text or "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
        contact_id = add_contact(str(chat_id), contact, msg_text)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=menu.get_main_menu())
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact}\nID: {chat_id}\n\n–¢–µ–∫—Å—Ç: {msg_text}\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –æ–±—Ä–∞—â–µ–Ω–∏–π."
        bot.send_message(ADMIN_ID, admin_msg)
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if file_id:
            if file_type == 'photo':
                bot.send_photo(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'document':
                bot.send_document(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'voice':
                bot.send_voice(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'video':
                bot.send_video(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'video_note':
                bot.send_video_note(ADMIN_ID, file_id)
        user_data.pop(chat_id, None)

from telebot import types
import time

from state.users import (
    user_data, start_registration, is_registration_in_progress, 
    get_registration_stage, update_registration_stage, 
    get_registration_start_time, cleanup_expired_registrations, clear_user_data
)
from utils.menu import get_main_menu, get_admin_menu, get_cancel_button, handle_cancel_action
from handlers.admin import notify_admin_new_application, is_admin
from data.db import (
    add_application,
    get_application_by_tg_id,
    get_active_courses,
    get_archive_count_by_tg_id,
    format_date_for_display,
    get_cancelled_count_by_tg_id,
    get_finished_count_by_tg_id
)
from utils.logger import log_user_action, log_error, setup_logger
from utils.security import check_user_security, validate_user_input, security_manager


def handle_existing_registration(bot, chat_id):
    markup = get_main_menu()
    bot.send_message(chat_id, "üìù –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞.", reply_markup=markup)


def register(bot, logger):
    @bot.message_handler(func=lambda m: m.text == "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
    def handle_signup(message):
        try:
            chat_id = message.chat.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_ok, error_msg = check_user_security(message.from_user.id, "signup")
            if not security_ok:
                bot.send_message(chat_id, f"üö´ {error_msg}")
                return

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            existing_app = get_application_by_tg_id(str(chat_id))
            if existing_app:
                status = existing_app[9]  # status
                if status == "–û–∂–∏–¥–∞–µ—Ç":
                    bot.send_message(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞—è–≤–∫—É.")
                    return
                elif status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                    course, date, link = existing_app[6], existing_app[7], existing_app[8]
                    formatted_date = format_date_for_display(date)
                    bot.send_message(chat_id, f"‚úÖ –£ –≤–∞—Å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–∫:\nüìÖ {formatted_date}\nüìò {course}\nüîó {link}", reply_markup=get_main_menu())
                    return

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω
            if get_cancelled_count_by_tg_id(str(chat_id)) >= 2:
                bot.send_message(chat_id, "üö´ –£ –≤–∞—Å 2 –∏–ª–∏ –±–æ–ª–µ–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–æ–≤. –ó–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            if get_finished_count_by_tg_id(str(chat_id)) >= 1:
                bot.send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 3. –ê—Ä—Ö–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
            if get_archive_count_by_tg_id(str(chat_id)) >= 2:
                bot.send_message(chat_id, "üö´ –í—ã —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 4. –ù–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤
            if not get_active_courses():
                bot.send_message(chat_id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.")
                return

            # 5. –¢–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if is_registration_in_progress(chat_id):
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                start_time = get_registration_start_time(chat_id)
                if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
                    # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    clear_user_data(chat_id)
                    bot.send_message(chat_id, "‚è∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
                else:
                    bot.send_message(chat_id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
                    return

            # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            start_registration(chat_id)
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è):", reply_markup=get_cancel_button())
            bot.register_next_step_handler(message, process_parent_name)
            logger.info(f"User {chat_id} started registration")
        except Exception as e:
            log_error(logger, e, f"Error in handle_signup for user {message.chat.id}")

    def process_parent_name(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "process_parent_name")
        if not security_ok:
            bot.send_message(chat_id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏ —Ç–∞–π–º–∞—É—Ç
        if get_registration_stage(chat_id) != "parent_name":
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = get_registration_start_time(chat_id)
        if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error_msg = validate_user_input(message.text, "name")
        if not is_valid:
            bot.send_message(chat_id, f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, process_parent_name)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager
        from state.users import update_user_data
        update_user_data(chat_id, parent_name=message.text.strip())
        update_registration_stage(chat_id, "student_name")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, process_student_name)

    def process_student_name(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "process_student_name")
        if not security_ok:
            bot.send_message(chat_id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏ —Ç–∞–π–º–∞—É—Ç
        if get_registration_stage(chat_id) != "student_name":
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = get_registration_start_time(chat_id)
        if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        is_valid, error_msg = validate_user_input(message.text, "name")
        if not is_valid:
            bot.send_message(chat_id, f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, process_student_name)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager
        from state.users import update_user_data
        update_user_data(chat_id, student_name=message.text.strip())
        update_registration_stage(chat_id, "age")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, process_age)

    def process_age(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "process_age")
        if not security_ok:
            bot.send_message(chat_id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏ —Ç–∞–π–º–∞—É—Ç
        if get_registration_stage(chat_id) != "age":
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = get_registration_start_time(chat_id)
        if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        is_valid, error_msg = validate_user_input(message.text, "age")
        if not is_valid:
            bot.send_message(chat_id, f"‚ùå {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, process_age)
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager
        from state.users import update_user_data
        update_user_data(chat_id, age=message.text.strip())
        update_registration_stage(chat_id, "course")

        courses = get_active_courses()
        if not courses:
            bot.send_message(chat_id, "‚ö†Ô∏è –ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for course in courses:
            markup.add(course[1])
        markup.add("üîô –û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=markup)
        bot.register_next_step_handler(message, process_course)

    def process_course(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "process_course")
        if not security_ok:
            bot.send_message(chat_id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏ —Ç–∞–π–º–∞—É—Ç
        if get_registration_stage(chat_id) != "course":
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = get_registration_start_time(chat_id)
        if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            return

        selected = message.text.strip()
        courses = get_active_courses()
        course_names = [c[1] for c in courses]

        if selected not in course_names:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return bot.register_next_step_handler(message, process_course)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager
        from state.users import update_user_data
        update_user_data(chat_id, course=selected)
        user = message.from_user
        update_user_data(chat_id, contact=f"@{user.username}" if user.username else "")
        update_registration_stage(chat_id, "confirmation")
        send_confirmation(bot, chat_id)

    def send_confirmation(bot, chat_id):
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager
        from state.users import get_user_data
        data = get_user_data(chat_id)
        if not data:
            return

        summary = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {data.get('parent_name')}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {data.get('student_name')}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
            f"üìò –ö—É—Ä—Å: {data.get('course')}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_registration"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")
        )
        bot.send_message(chat_id, summary, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_registration", "cancel_registration"])
    def handle_confirmation(call):
        chat_id = call.message.chat.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "confirm_registration")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return

        if call.data == "cancel_registration":
            handle_cancel_action(bot, call.message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–ø –∏ —Ç–∞–π–º–∞—É—Ç
        if get_registration_stage(chat_id) != "confirmation":
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
        start_time = get_registration_start_time(chat_id)
        if time.time() - start_time > 30 * 60:  # 30 –º–∏–Ω—É—Ç
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚è∞ –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu())
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        from state.users import get_user_data
        data = get_user_data(chat_id)
        
        try:
            add_application(
                tg_id=str(chat_id),
                parent_name=data["parent_name"],
                student_name=data["student_name"],
                age=data["age"],
                contact=data["contact"],
                course=data["course"]
            )
            notify_admin_new_application(bot, data)
            bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
            clear_user_data(chat_id)
            logger.info(f"User {chat_id} submitted application")
            
        except ValueError as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}", reply_markup=get_main_menu())
            clear_user_data(chat_id)
            logger.warning(f"User {chat_id} tried to create duplicate application: {e}")
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            clear_user_data(chat_id)
            log_error(logger, e, f"Error saving application for user {chat_id}")


def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger = setup_logger('registration')
    register(bot, logger)

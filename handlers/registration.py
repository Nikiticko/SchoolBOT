from telebot import types

from state.users import user_data
from utils.menu import get_main_menu, get_admin_menu, get_cancel_button, handle_cancel_action
from handlers.admin import notify_admin_new_application, is_admin
from data.db import (
    add_application,
    get_application_by_tg_id,
    get_active_courses,
    get_archive_count_by_tg_id,
    format_date_for_display,
    get_cancelled_count_by_tg_id,
    get_finished_count_by_tg_id
)
from utils.logger import log_user_action, log_error


def handle_existing_registration(bot, chat_id):
    markup = get_main_menu()
    bot.send_message(chat_id, "üìù –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞.", reply_markup=markup)


def register(bot, logger):
    @bot.message_handler(func=lambda m: m.text == "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
    def handle_signup(message):
        try:
            chat_id = message.chat.id

            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω
            if get_cancelled_count_by_tg_id(str(chat_id)) >= 2:
                bot.send_message(chat_id, "üö´ –£ –≤–∞—Å 2 –∏–ª–∏ –±–æ–ª–µ–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–ª–∏ —É—Ä–æ–∫–æ–≤. –ó–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
            if get_finished_count_by_tg_id(str(chat_id)) >= 1:
                bot.send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫. –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 3. –ê—Ä—Ö–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
            if get_archive_count_by_tg_id(str(chat_id)) >= 2:
                bot.send_message(chat_id, "üö´ –í—ã —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return

            # 4. –ù–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤
            if not get_active_courses():
                bot.send_message(chat_id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.")
                return

            # 5. –¢–µ–∫—É—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            if user_data.get(chat_id, {}).get("in_progress"):
                bot.send_message(chat_id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
                return

            # 6. –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
            app = get_application_by_tg_id(str(chat_id))
            if app:
                course, date, link = app[6], app[7], app[8]
                if not date and not link:
                    handle_existing_registration(bot, chat_id)
                else:
                    formatted_date = format_date_for_display(date)
                    bot.send_message(chat_id, f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\nüìÖ {formatted_date}\nüìò {course}\nüîó {link}", reply_markup=get_main_menu())
                return

            # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user_data[chat_id] = {
                "in_progress": True,
                "stage": "parent_name"
            }
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è):", reply_markup=get_cancel_button())
            bot.register_next_step_handler(message, process_parent_name)
            logger.info(f"User {chat_id} started registration")
        except Exception as e:
            log_error(logger, e, f"Error in handle_signup for user {message.chat.id}")

    def process_parent_name(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        if user_data.get(chat_id, {}).get("stage") != "parent_name":
            return
            
        user_data[chat_id]["parent_name"] = message.text.strip()
        user_data[chat_id]["stage"] = "student_name"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, process_student_name)

    def process_student_name(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        if user_data.get(chat_id, {}).get("stage") != "student_name":
            return
            
        user_data[chat_id]["student_name"] = message.text.strip()
        user_data[chat_id]["stage"] = "age"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, process_age)

    def process_age(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return
            
        if user_data.get(chat_id, {}).get("stage") != "age":
            return
            
        user_data[chat_id]["age"] = message.text.strip()
        user_data[chat_id]["stage"] = "course"

        courses = get_active_courses()
        if not courses:
            bot.send_message(chat_id, "‚ö†Ô∏è –ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for course in courses:
            markup.add(course[1])
        markup.add("üîô –û—Ç–º–µ–Ω–∞")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=markup)
        bot.register_next_step_handler(message, process_course)

    def process_course(message):
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            handle_cancel_action(bot, message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return

        if user_data.get(chat_id, {}).get("stage") != "course":
            return

        selected = message.text.strip()
        courses = get_active_courses()
        course_names = [c[1] for c in courses]

        if selected not in course_names:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return bot.register_next_step_handler(message, process_course)

        user_data[chat_id]["course"] = selected
        user = message.from_user
        user_data[chat_id]["contact"] = f"@{user.username}" if user.username else ""
        user_data[chat_id]["stage"] = "confirmation"
        send_confirmation(bot, chat_id)

    def send_confirmation(bot, chat_id):
        data = user_data.get(chat_id)
        if not data:
            return

        summary = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {data.get('parent_name')}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {data.get('student_name')}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
            f"üìò –ö—É—Ä—Å: {data.get('course')}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data.get('contact') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_registration"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_registration")
        )
        bot.send_message(chat_id, summary, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_registration", "cancel_registration"])
    def handle_confirmation(call):
        chat_id = call.message.chat.id

        if call.data == "cancel_registration":
            handle_cancel_action(bot, call.message, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", logger)
            return

        if user_data.get(chat_id, {}).get("stage") != "confirmation":
            bot.send_message(chat_id, "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        data = user_data[chat_id]
        add_application(
            tg_id=str(chat_id),
            parent_name=data["parent_name"],
            student_name=data["student_name"],
            age=data["age"],
            contact=data["contact"],
            course=data["course"]
        )
        notify_admin_new_application(bot, data)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
        user_data.pop(chat_id, None)
        logger.info(f"User {chat_id} submitted application")

    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    def handle_my_lesson_button(message):
        chat_id = message.chat.id
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "–í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ ¬´üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª.", reply_markup=get_main_menu())
            return
        course, date, link = app[6], app[7], app[8]
        if not date and not link:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –∏ –∫–Ω–æ–ø–∫–∏
            parent_name = app[2]
            student_name = app[3]
            age = app[4]
            contact = app[5]
            course = app[6]
            msg = (
                f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit_application"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_application")
            )
            bot.send_message(chat_id, msg, reply_markup=markup)
            return
        # ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (—É—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω)

    @bot.callback_query_handler(func=lambda c: c.data == "edit_application")
    def handle_edit_application(call):
        chat_id = call.message.chat.id
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        parent_name = app[2]
        student_name = app[3]
        age = app[4]
        contact = app[5]
        course = app[6]
        user = call.from_user
        fields = [
            ("–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è", "parent_name"),
            ("–ò–º—è —É—á–µ–Ω–∏–∫–∞", "student_name"),
            ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
            ("–ö—É—Ä—Å", "course")
        ]
        # –ö–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ username
        if not user.username:
            fields.append(("–ö–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)", "contact"))
        markup = types.InlineKeyboardMarkup()
        for label, key in fields:
            markup.add(types.InlineKeyboardButton(label, callback_data=f"edit_field:{key}"))
        bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data FSM
        from state.users import user_data
        user_data[chat_id] = {
            "edit_app": True,
            "app_id": app[0],
            "parent_name": parent_name,
            "student_name": student_name,
            "age": age,
            "contact": contact,
            "course": course
        }

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_field:"))
    def handle_edit_field(call):
        chat_id = call.message.chat.id
        field = call.data.split(":")[1]
        prompts = {
            "parent_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:",
            "student_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:",
            "age": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
            "course": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:",
            "contact": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        }
        if field == "course":
            courses = get_active_courses()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for c in courses:
                markup.add(c[1])
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            bot.send_message(chat_id, prompts[field], reply_markup=markup)
        else:
            bot.send_message(chat_id, prompts[field], reply_markup=get_cancel_button())
        from state.users import user_data
        user_data[chat_id]["edit_field"] = field
        bot.register_next_step_handler(call.message, process_edit_field)

    def process_edit_field(message):
        chat_id = message.chat.id
        from state.users import user_data
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
            user_data.pop(chat_id, None)
            return
        field = user_data[chat_id].get("edit_field")
        value = message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if field == "age":
            if not value.isdigit() or not (3 <= int(value) <= 99):
                bot.send_message(chat_id, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 99.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field == "course":
            courses = [c[1] for c in get_active_courses()]
            if value not in courses:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field in ("parent_name", "student_name"):
            if not value or not value.replace(" ", "").isalpha():
                bot.send_message(chat_id, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")
                return bot.register_next_step_handler(message, process_edit_field)
        if field == "contact":
            import re
            if not re.match(r"^\+?\d{10,15}$", value):
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +)")
                return bot.register_next_step_handler(message, process_edit_field)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        user_data[chat_id][field] = value
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        app = user_data[chat_id]
        msg = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app['parent_name']}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {app['student_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app['age']}\n"
            f"üìò –ö—É—Ä—Å: {app['course']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {app['contact'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_edit_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit_application"))
        bot.send_message(chat_id, msg, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_edit_application")
    def handle_confirm_edit_application(call):
        chat_id = call.message.chat.id
        from state.users import user_data
        app = user_data.get(chat_id)
        if not app:
            bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        import sqlite3
        conn = sqlite3.connect("data/database.db")
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE applications SET parent_name=?, student_name=?, age=?, contact=?, course=? WHERE id=?
        """, (app["parent_name"], app["student_name"], app["age"], app["contact"], app["course"], app["app_id"]))
        conn.commit()
        conn.close()
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∞
        bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
        notify_admin_new_application(bot, app)
        user_data.pop(chat_id, None)

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_edit_application")
    def handle_cancel_edit_application(call):
        chat_id = call.message.chat.id
        from state.users import user_data
        user_data.pop(chat_id, None)
        bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_application")
    def handle_cancel_application(call):
        chat_id = call.message.chat.id
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_application"))
        bot.send_message(chat_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_application")
    def handle_confirm_cancel_application(call):
        chat_id = call.message.chat.id
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
        import sqlite3
        conn = sqlite3.connect("data/database.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM applications WHERE tg_id = ?", (str(chat_id),))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
        # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        notify_admin_new_application(bot, {"tg_id": chat_id, "action": "cancelled"})

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_application")
    def handle_cancel_cancel_application(call):
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=get_main_menu())

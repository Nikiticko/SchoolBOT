# === handlers/registration.py ===
from telebot import types
import re

from state.users import user_data, used_contacts, get_user_status, get_user_status_by_contact
from utils.menu import get_main_menu
from services.sheets_service import finish_registration
from handlers.admin import notify_admin_new_application


def handle_existing_registration(bot, chat_id):
    markup = get_main_menu()
    bot.send_message(chat_id, "üìù –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–∫–∞.", reply_markup=markup)


def register(bot):
    @bot.message_handler(func=lambda m: m.text == "üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
    def handle_signup(message):
        chat_id = message.chat.id
        print(f"[signup] ‚ñ∂ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –æ—Ç chat_id={chat_id}")

        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if user_data.get(chat_id, {}).get("in_progress"):
            bot.send_message(chat_id, "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        exists, date, course, link = get_user_status(chat_id)
        if exists:
            if not date and not link:
                handle_existing_registration(bot, chat_id)
            else:
                markup = get_main_menu()
                bot.send_message(chat_id, f"–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\nüìÖ –î–∞—Ç–∞: {date}\nüìò –ö—É—Ä—Å: {course}\nüîó –°—Å—ã–ª–∫–∞: {link}", reply_markup=markup)
            return

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        user_data[chat_id] = {
            "in_progress": True,
            "stage": "parent_name"
        }

        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_parent_name)


    def process_parent_name(message):
        chat_id = message.chat.id
        if user_data.get(chat_id, {}).get("stage") != "parent_name":
            return

        user_data[chat_id]["parent_name"] = message.text.strip()
        user_data[chat_id]["stage"] = "student_name"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:")
        bot.register_next_step_handler(message, process_student_name)


    def process_student_name(message):
        chat_id = message.chat.id
        if user_data.get(chat_id, {}).get("stage") != "student_name":
            return

        user_data[chat_id]["student_name"] = message.text.strip()
        user_data[chat_id]["stage"] = "age"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–µ–Ω–∏–∫–∞:")
        bot.register_next_step_handler(message, process_age)


    def process_age(message):
        chat_id = message.chat.id
        if user_data.get(chat_id, {}).get("stage") != "age":
            return

        user_data[chat_id]["age"] = message.text.strip()
        user_data[chat_id]["stage"] = "course"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("Python")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=markup)
        bot.register_next_step_handler(message, process_course)


    def process_course(message):
        chat_id = message.chat.id
        if user_data.get(chat_id, {}).get("stage") != "course":
            return

        course = message.text.strip()
        if course.lower() != "python":
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
            return bot.register_next_step_handler(message, process_course)

        user_data[chat_id]["course"] = course
        user = message.from_user
        contact = f"@{user.username}" if user.username else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
        if user_data[chat_id].get("notified"):
            print(f"[course] ‚è≠ –£–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω. –ü–æ–≤—Ç–æ—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
            return
        user_data[chat_id]["notified"] = True

        if contact:
            if contact in used_contacts:
                exists, date, course, link = get_user_status_by_contact(contact)
                if exists:
                    handle_existing_registration(bot, chat_id)
                    return

            user_data[chat_id]["contact"] = contact
            notify_admin_new_application(bot, user_data[chat_id])
            finish_registration(bot, chat_id)

        else:
            user_data[chat_id]["stage"] = "phone"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
            bot.send_message(
                chat_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:",
                reply_markup=markup
            )
            bot.register_next_step_handler(message, process_phone)

        if chat_id in user_data:
            user_data[chat_id].pop("in_progress", None)



    def process_phone(message):
        chat_id = message.chat.id
        if user_data.get(chat_id, {}).get("stage") != "phone":
            return

        if message.contact:
            phone = message.contact.phone_number
        else:
            phone = message.text.strip()

        phone = re.sub(r'\D', '', phone)
        if phone.startswith('8'):
            phone = '7' + phone[1:]
        if not phone.startswith('7') or len(phone) != 11:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567")
            return bot.register_next_step_handler(message, process_phone)

        contact = f"+{phone}"
        if contact in used_contacts:
            exists, date, course, link = get_user_status_by_contact(contact)
            if exists:
                handle_existing_registration(bot, chat_id)
                return
   
        user_data[chat_id]["contact"] = contact
        notify_admin_new_application(bot, user_data[chat_id])
        finish_registration(bot, chat_id)
        if chat_id in user_data:
            user_data[chat_id].pop("in_progress", None)

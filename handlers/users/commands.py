# === handlers/commands.py ===
from telebot import types
import utils.menu as menu
from data.db import (
    get_application_by_tg_id, format_date_for_display, get_active_courses, get_cancelled_count_by_tg_id, get_finished_count_by_tg_id, get_all_archive, archive_application, get_last_contact_time, add_contact, update_application, delete_application_by_tg_id, get_reviews_for_publication_with_deleted, can_send_admin_notification, mark_admin_notification_sent
)
from utils.logger import log_user_action, log_error, setup_logger
from state.users import get_user_data, set_user_data, update_user_data, clear_user_data
from config import ADMIN_ID
from utils.security import check_user_security, validate_user_input, security_manager
from utils.decorators import error_handler, ensure_text_message, ensure_stage
from utils.menu import get_appropriate_menu, is_admin

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    logger = setup_logger('commands')
    register(bot, logger)

def register(bot, logger):  

    @bot.message_handler(commands=["help"])
    @error_handler()
    def handle_help(message):
        import time
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "help")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        help_text = (
            "ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –ª–∏—á–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚Äî –≤—Å—ë –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n\n"
            
            "üìù <b>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ'\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –≤–∞–º –Ω–∞–ø–∏—à–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ —É—Ä–æ–∫–∞\n\n"

            "üìÖ <b>–ú–æ—ë –∑–∞–Ω—è—Ç–∏–µ</b>\n"
            "‚Ä¢ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –±–ª–∏–∂–∞–π—à–µ–º —É—Ä–æ–∫–µ\n"
            "‚Ä¢ –ï—Å–ª–∏ —É—Ä–æ–∫ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã\n"
            "‚Ä¢ –¢–∞–∫–∂–µ —á–µ—Ä–µ–∑ —ç—Ç—É –∫–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è\n\n"

            "üÜò <b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é</b>\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É'\n"
            "‚Ä¢ –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É üôå\n\n"

            "‚ÑπÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:</b>\n"
            "‚Ä¢ '‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ' ‚Äî –∫—Ç–æ —è, –º–æ–π –ø–æ–¥—Ö–æ–¥ –∏ –æ–ø—ã—Ç\n"
            "‚Ä¢ 'üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã' ‚Äî –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
            "‚Ä¢ 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã' ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å\n\n"

            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            "–≠—Ç–æ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –∏ –æ–Ω –≤—Å—ë –µ—â—ë —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è. –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ ‚Äî\n"
            "<b>–ø–æ–∂–∞–ª—É–π—Å—Ç–∞</b>, –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É'. –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç üôè\n\n"

            "üìå –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ'!"
        )
        
        bot.send_message(message.chat.id, help_text, parse_mode="HTML")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, message.from_user.id, "HELP_COMMAND", f"Username: {message.from_user.username}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (help command)")

    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    @error_handler()
    def handle_my_lesson(message):
        import time
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "my_lesson")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        application = get_application_by_tg_id(str(chat_id))
        
        if not application:
            bot.send_message(chat_id, "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!", reply_markup=menu.get_appropriate_menu(user.id))
            log_user_action(logger, user.id, "MY_LESSON_NO_APPLICATION", "No active application found")
            return
        
        app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = application
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if status == "–û–∂–∏–¥–∞–µ—Ç":
            formatted_created = format_date_for_display(created_at)
            application_text = (
                f"üìã <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n\n"
                f"üÜî <b>–ù–æ–º–µ—Ä:</b> #{app_id}\n"
                f"üë§ <b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {parent_name}\n"
                f"üßí <b>–£—á–µ–Ω–∏–∫:</b> {student_name}\n"
                f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
                f"üìò <b>–ö—É—Ä—Å:</b> {course}\n"
                f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {formatted_created}\n"
                f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                f"‚è≥ <i>–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è.</i>"
            )
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_application"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")
            )
            from data.db import can_send_admin_notification
            if can_send_admin_notification(app_id):
                markup.add(types.InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –∞–¥–º–∏–Ω—É", callback_data="notify_admin"))
            else:
                markup.add(types.InlineKeyboardButton("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data="notification_sent"))
            
            bot.send_message(chat_id, application_text, parse_mode="HTML", reply_markup=markup)
            log_user_action(logger, user.id, "MY_LESSON_PENDING_DETAILED", f"Course: {course}, Status: {status}")
            return
        elif status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            formatted_date = format_date_for_display(lesson_date)
            application_text = (
                f"üìã <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞:</b>\n\n"
                f"üÜî <b>–ù–æ–º–µ—Ä:</b> #{app_id}\n"
                f"üë§ <b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {parent_name}\n"
                f"üßí <b>–£—á–µ–Ω–∏–∫:</b> {student_name}\n"
                f"üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
                f"üìò <b>–ö—É—Ä—Å:</b> {course}\n"
                f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ <b>–î–∞—Ç–∞ —É—Ä–æ–∫–∞:</b> {formatted_date}\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {lesson_link or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                f"‚úÖ –£—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
            )
            bot.send_message(chat_id, application_text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(user.id))
            return
        else:
            bot.send_message(chat_id, f"‚ùå –ó–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ '{status}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=menu.get_appropriate_menu(user.id))
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = format_date_for_display(lesson_date)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lesson_text = (
            f"üìÖ <b>–í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:</b>\n\n"
            f"üë§ <b>–£—á–µ–Ω–∏–∫:</b> {student_name}\n"
            f"üìò <b>–ö—É—Ä—Å:</b> {course}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {lesson_link}\n\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )
        
        bot.send_message(chat_id, lesson_text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(user.id))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, user.id, "MY_LESSON_VIEWED", f"Course: {course}, Date: {formatted_date}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (my_lesson command)")
        
        # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìä Lesson viewed: user {user.id} viewed lesson for course {course}")

    @bot.callback_query_handler(func=lambda c: c.data == "edit_application")
    def handle_edit_application(call):
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "edit_application")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if app[9] != "–û–∂–∏–¥–∞–µ—Ç":
            bot.send_message(chat_id, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç'.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
        import time
        user_data = get_user_data(chat_id)
        last_edit = user_data.get("last_edit_time") if user_data else None
        now = time.time()
        if last_edit and now - last_edit < 86400:
            hours = int((86400 - (now - last_edit)) // 3600)
            minutes = int(((86400 - (now - last_edit)) % 3600) // 60)
            bot.send_message(chat_id, f"‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ 24 —á–∞—Å–∞. –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏: {hours} —á {minutes} –º–∏–Ω.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        parent_name = app[2]
        student_name = app[3]
        age = app[4]
        contact = app[5]
        course = app[6]
        user = call.from_user
        fields = [
            ("–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è", "parent_name"),
            ("–ò–º—è —É—á–µ–Ω–∏–∫–∞", "student_name"),
            ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
            ("–ö—É—Ä—Å", "course")
        ]
        # –ö–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ username
        if not user.username:
            fields.append(("–ö–æ–Ω—Ç–∞–∫—Ç", "contact"))
        markup = types.InlineKeyboardMarkup()
        for label, key in fields:
            markup.add(types.InlineKeyboardButton(label, callback_data=f"edit_field:{key}"))
        bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
        set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": parent_name, "student_name": student_name, "age": age, "contact": contact, "course": course})
        log_user_action(logger, call.from_user.id, "edit_application_started")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_field:"))
    def handle_edit_field(call):
        security_ok, error_msg = check_user_security(call.from_user.id, "edit_field")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        chat_id = call.message.chat.id
        field = call.data.split(":")[1]
        user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            app = get_application_by_tg_id(str(chat_id))
            if app and app[9] == "–û–∂–∏–¥–∞–µ—Ç":
                set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": app[2], "student_name": app[3], "age": app[4], "contact": app[5], "course": app[6]})
                user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        field_names = {
            "parent_name": "–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è",
            "student_name": "–∏–º—è —É—á–µ–Ω–∏–∫–∞", 
            "age": "–≤–æ–∑—Ä–∞—Å—Ç",
            "contact": "–∫–æ–Ω—Ç–∞–∫—Ç",
            "course": "–∫—É—Ä—Å"
        }
        if field == "course":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            courses = get_active_courses()
            if not courses:
                bot.send_message(chat_id, "‚ö†Ô∏è –ö—É—Ä—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
                return
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for c in courses:
                markup.add(c[1])
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:", reply_markup=markup)
            bot.register_next_step_handler(call.message, process_edit_course_field)
            log_user_action(logger, call.from_user.id, f"edit_field_{field}_choose")
            return
        msg = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names.get(field, field)}:")
        bot.register_next_step_handler(msg, process_edit_field, field)
        log_user_action(logger, call.from_user.id, f"edit_field_{field}")

    def process_edit_field(message, field):
        security_ok, error_msg = check_user_security(message.from_user.id, "process_edit_field")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        chat_id = message.chat.id
        user_data = get_user_data(chat_id)
        # –ï—Å–ª–∏ user_data –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç edit_app, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î
        if not user_data or not user_data.get("edit_app"):
            app = get_application_by_tg_id(str(chat_id))
            if app and app[9] == "–û–∂–∏–¥–∞–µ—Ç":
                set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": app[2], "student_name": app[3], "age": app[4], "contact": app[5], "course": app[6]})
                user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        try:
            import logging
            logging.warning(f"DEBUG: field type={type(field)}, value={field}, new_value(raw)='{message.text}' (chat_id={chat_id})")
        except Exception:
            pass
        new_value = message.text.strip()
        try:
            import logging
            logging.warning(f"DEBUG: new_value after strip='{new_value}' (chat_id={chat_id})")
        except Exception:
            pass
        if not new_value:
            bot.send_message(chat_id, "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        if field == "age":
            age_str = new_value
            if not age_str.isdigit() or not (5 <= int(age_str) <= 99):
                from utils.menu import get_cancel_button
                msg = bot.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏, –æ—Ç 5 –¥–æ 99 –ª–µ—Ç, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_cancel_button()
                )
                try:
                    import logging
                    logging.warning(f"AGE VALIDATION FAIL: chat_id={chat_id}, value='{new_value}'")
                except Exception:
                    pass
                bot.register_next_step_handler(msg, process_edit_field, field)
                return
            new_value = str(int(age_str))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∫ —á–∏—Å–ª–æ-—Å—Ç—Ä–æ–∫—É –±–µ–∑ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —É—á–µ–Ω–∏–∫–∞
        if field in ("parent_name", "student_name"):
            import re
            name = new_value.strip()
            if not (2 <= len(name) <= 32) or not re.fullmatch(r"[–ê-–Ø–∞-—èA-Za-z–Å—ë\-\s]+", name):
                from utils.menu import get_cancel_button
                msg = bot.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞! –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –¥–ª–∏–Ω–∞ 2-32 —Å–∏–º–≤–æ–ª–∞.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_cancel_button()
                )
                try:
                    import logging
                    logging.warning(f"NAME VALIDATION FAIL: chat_id={chat_id}, field={field}, value='{new_value}'")
                except Exception:
                    pass
                bot.register_next_step_handler(msg, process_edit_field, field)
                return
            new_value = name
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ username)
        if field == "contact":
            import re
            contact = new_value.strip()
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
            phone_clean = re.sub(r"[^\d+]", "", contact)
            if phone_clean.startswith("8") and len(phone_clean) == 11:
                phone_clean = "+7" + phone_clean[1:]
            elif phone_clean.startswith("7") and len(phone_clean) == 11:
                phone_clean = "+7" + phone_clean[1:]
            elif phone_clean.startswith("+7") and len(phone_clean) == 12:
                pass
            elif len(phone_clean) == 10:
                phone_clean = "+7" + phone_clean
            is_phone = re.fullmatch(r"\+7\d{10}", phone_clean)
            is_username = re.fullmatch(r"@\w{5,32}", contact)
            if not (is_phone or is_username):
                from utils.menu import get_cancel_button
                msg = bot.send_message(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX, 8XXXXXXXXXX, 7XXXXXXXXXX –∏–ª–∏ username —á–µ—Ä–µ–∑ @ (5-32 —Å–∏–º–≤–æ–ª–∞).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=get_cancel_button()
                )
                try:
                    import logging
                    logging.warning(f"CONTACT VALIDATION FAIL: chat_id={chat_id}, value='{new_value}'")
                except Exception:
                    pass
                bot.register_next_step_handler(msg, process_edit_field, field)
                return
            new_value = phone_clean if is_phone else contact
        try:
            import logging
            logging.warning(f"DEBUG: update_user_data called with {field}={new_value} (chat_id={chat_id})")
        except Exception:
            pass
        update_user_data(chat_id, **{str(field): new_value})
        try:
            import logging
            logging.warning(f"DEBUG: user_data after update: {get_user_data(chat_id)} (chat_id={chat_id})")
        except Exception:
            pass
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏
        updated_data = get_user_data(chat_id).copy()
        clear_user_data(chat_id)
        msg = (
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {updated_data.get('parent_name', '-') }\n"
            f"üßí –£—á–µ–Ω–∏–∫: {updated_data.get('student_name', '-') }\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {updated_data.get('age', '-') }\n"
            f"üìò –ö—É—Ä—Å: {updated_data.get('course', '-') }\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {updated_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
        )
        bot.send_message(chat_id, msg, reply_markup=markup)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    def process_edit_course_field(message):
        chat_id = message.chat.id
        security_ok, error_msg = check_user_security(message.from_user.id, "process_edit_field")
        if not security_ok:
            bot.send_message(chat_id, f"üö´ {error_msg}")
            return
        user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            app = get_application_by_tg_id(str(chat_id))
            if app and app[9] == "–û–∂–∏–¥–∞–µ—Ç":
                set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": app[2], "student_name": app[3], "age": app[4], "contact": app[5], "course": app[6]})
                user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        selected = message.text.strip()
        courses = get_active_courses()
        course_names = [c[1] for c in courses]
        if selected not in course_names:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for c in courses:
                markup.add(c[1])
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
            bot.register_next_step_handler(message, process_edit_course_field)
            return
        update_user_data(chat_id, course=selected)
        updated_data = get_user_data(chat_id).copy()
        clear_user_data(chat_id)
        msg = (
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {updated_data.get('parent_name', '-') }\n"
            f"üßí –£—á–µ–Ω–∏–∫: {updated_data.get('student_name', '-') }\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {updated_data.get('age', '-') }\n"
            f"üìò –ö—É—Ä—Å: {updated_data.get('course', '-') }\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {updated_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
        )
        bot.send_message(chat_id, msg, reply_markup=markup)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.callback_query_handler(func=lambda c: c.data == "save_edit")
    def handle_save_edit(call):
        security_ok, error_msg = check_user_security(call.from_user.id, "save_edit")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        chat_id = call.message.chat.id
        user_data = get_user_data(chat_id)
        # –ï—Å–ª–∏ user_data –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç edit_app, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ë–î
        if not user_data or not user_data.get("edit_app"):
            app = get_application_by_tg_id(str(chat_id))
            if app and app[9] == "–û–∂–∏–¥–∞–µ—Ç":
                set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": app[2], "student_name": app[3], "age": app[4], "contact": app[5], "course": app[6]})
                user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        try:
            app_data = get_user_data(chat_id)
            update_application(
                app_data["app_id"],
                app_data["parent_name"],
                app_data["student_name"], 
                app_data["age"],
                app_data.get("contact", ""),
                app_data["course"]
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            import time
            update_user_data(chat_id, last_edit_time=time.time())
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            from config import ADMIN_ID
            user = call.from_user
            msg_admin = (
                f"‚úèÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –∑–∞—è–≤–∫—É</b>\n\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app_data.get('parent_name', '-') }\n"
                f"üßí –£—á–µ–Ω–∏–∫: {app_data.get('student_name', '-') }\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app_data.get('age', '-') }\n"
                f"üìò –ö—É—Ä—Å: {app_data.get('course', '-') }\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {app_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üÜî User ID: {user.id}\n"
                f"üë§ Username: @{user.username if user.username else '-'}"
            )
            bot.send_message(ADMIN_ID, msg_admin, parse_mode="HTML")
            clear_user_data(chat_id)
            bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            log_user_action(logger, call.from_user.id, "application_updated")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            log_error(logger, e, f"Error updating application for user {call.from_user.id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_edit")
    def handle_cancel_edit(call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "cancel_edit")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        chat_id = call.message.chat.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        clear_user_data(chat_id)
        
        bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
        log_user_action(logger, call.from_user.id, "edit_cancelled")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_application")
    def handle_cancel_application(call):
        chat_id = call.message.chat.id
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if app[9] != "–û–∂–∏–¥–∞–µ—Ç":
            bot.send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç'.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"cancel_app_stage": True})
        bot.register_next_step_handler(msg, process_cancel_reason)

    def process_cancel_reason(message):
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_application"))
        set_user_data(chat_id, {"cancel_reason": reason})
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_application")
    def handle_confirm_cancel_application(call):
        chat_id = call.message.chat.id
        security_ok, error_msg = check_user_security(call.from_user.id, "confirm_cancel_application")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if app[9] != "–û–∂–∏–¥–∞–µ—Ç":
            bot.send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ '–û–∂–∏–¥–∞–µ—Ç'.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        reason = get_user_data(chat_id).get("cancel_reason", "")
        try:
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            delete_application_by_tg_id(chat_id)
            bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            parent_name = app[2] if app else '-'
            student_name = app[3] if app else '-'
            course = app[6] if app else '-'
            msg = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            bot.send_message(ADMIN_ID, msg)
            clear_user_data(chat_id)
            log_user_action(logger, call.from_user.id, "cancelled_application")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            log_error(logger, e, f"Error cancelling application for user {chat_id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_application")
    def handle_cancel_cancel_application(call):
        chat_id = call.message.chat.id
        clear_user_data(chat_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_appropriate_menu(call.from_user.id))

    @bot.callback_query_handler(func=lambda c: c.data == "notify_admin")
    def handle_notify_admin(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–Ω–∏—Ç—å –∞–¥–º–∏–Ω—É'"""
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "notify_admin")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        app_id = app[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not can_send_admin_notification(app_id):
            bot.answer_callback_query(call.id, "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_msg = (
                f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ!</b>\n\n"
                f"üÜî <b>–ó–∞—è–≤–∫–∞:</b> #{app_id}\n"
                f"üë§ <b>–†–æ–¥–∏—Ç–µ–ª—å:</b> {app[2]}\n"
                f"üßí <b>–£—á–µ–Ω–∏–∫:</b> {app[3]} ({app[4]} –ª–µ—Ç)\n"
                f"üìò <b>–ö—É—Ä—Å:</b> {app[6]}\n"
                f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {app[5] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {format_date_for_display(app[10])}\n\n"
                f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É</i>"
            )
            
            bot.send_message(ADMIN_ID, admin_msg, parse_mode="HTML")
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            mark_admin_notification_sent(app_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_application"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_application")
            )
            markup.add(types.InlineKeyboardButton("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", callback_data="notification_sent"))
            
            bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
            bot.answer_callback_query(call.id, "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
            log_user_action(logger, call.from_user.id, "admin_notification_sent", f"application: {app_id}")
            
        except Exception as e:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            log_error(logger, e, f"Error sending admin notification for user {chat_id}")

    @bot.callback_query_handler(func=lambda c: c.data == "notification_sent")
    def handle_notification_sent(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è)"""
        bot.answer_callback_query(call.id, "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_info:"))
    def show_course_info(call):
        try:
            course_id = int(call.data.split(":")[1])
            courses = get_active_courses()
            course = next((c for c in courses if c[0] == course_id), None)

            if course:
                name = course[1]
                description = course[2]
                msg = f"üìò *{name}*\n\nüìù {description}"
                bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=menu.get_appropriate_menu(call.from_user.id))
                log_user_action(logger, call.from_user.id, "course_info_viewed", f"course: {name}")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
                log_user_action(logger, call.from_user.id, "course_not_found", f"course_id: {course_id}")
        except Exception as e:
            log_error(logger, e, f"Course info for user {call.from_user.id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_lesson_user")
    def handle_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞:", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"cancel_lesson_stage": True})
        bot.register_next_step_handler(msg, process_cancel_lesson_reason)

    def process_cancel_lesson_reason(message):
        chat_id = message.chat.id
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_lesson_user"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_lesson_user"))
        set_user_data(chat_id, {"cancel_lesson_reason": reason})
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_lesson_user")
    def handle_confirm_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        security_ok, error_msg = check_user_security(call.from_user.id, "confirm_cancel_lesson_user")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if app[9] != "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            bot.send_message(chat_id, "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ '–ù–∞–∑–Ω–∞—á–µ–Ω–æ'.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        reason = get_user_data(chat_id).get("cancel_lesson_reason", "")
        try:
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")
            delete_application_by_tg_id(chat_id)
            bot.send_message(chat_id, "‚úÖ –í–∞—à —É—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            parent_name = app[2] if app else '-'
            student_name = app[3] if app else '-'
            course = app[6] if app else '-'
            msg = (
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É—Ä–æ–∫\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            bot.send_message(ADMIN_ID, msg)
            clear_user_data(chat_id)
            log_user_action(logger, call.from_user.id, "cancelled_lesson")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            log_error(logger, e, f"Error cancelling lesson for user {chat_id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_lesson_user")
    def handle_cancel_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        clear_user_data(chat_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É")
    def handle_contact_admin(message):
        from data.db import get_last_contact_time, add_contact
        import datetime
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        security_ok, error_msg = check_user_security(message.from_user.id, "contact_admin")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        last_time = get_last_contact_time(str(chat_id))
        if last_time:
            last_dt = datetime.datetime.fromisoformat(last_time)
            if (datetime.datetime.now() - last_dt).total_seconds() < 20*60:
                bot.send_message(chat_id, "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
                return
        bot.send_message(chat_id, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'.", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"contact_fsm": True})
        bot.register_next_step_handler(message, process_contact_message)

    def process_contact_message(message):
        from data.db import add_contact
        chat_id = message.chat.id
        user = message.from_user
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        contact = f"@{user.username}" if user.username else (get_user_data(chat_id).get("phone") or str(chat_id))
        allowed_types = ["photo", "document", "audio", "voice", "video_note", "sticker"]
        forbidden_types = ["video", "animation"]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ media_group (–∞–ª—å–±–æ–º)
        if hasattr(message, 'media_group_id') and message.media_group_id:
            bot.send_message(chat_id, "üö´ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        present_types = 0
        file_id = None
        file_type = None
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_type = 'photo'
            present_types += 1
        if message.content_type == 'document':
            file_id = message.document.file_id
            file_type = 'document'
            present_types += 1
        if message.content_type == 'voice':
            file_id = message.voice.file_id
            file_type = 'voice'
            present_types += 1
        if message.content_type == 'audio':
            file_id = message.audio.file_id
            file_type = 'audio'
            present_types += 1
        if message.content_type == 'video_note':
            file_id = message.video_note.file_id
            file_type = 'video_note'
            present_types += 1
        if message.content_type == 'sticker':
            file_id = message.sticker.file_id
            file_type = 'sticker'
            present_types += 1
        if message.content_type in forbidden_types:
            bot.send_message(chat_id, "üö´ –í–∏–¥–µ–æ –∏ GIF (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–ª–æ–∂–µ–Ω–∏—è ‚Äî –æ—Ç–∫–∞–∑
        if present_types > 1:
            bot.send_message(chat_id, "üö´ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        msg_text = ""
        if file_id:
            msg_text += f"[–í–ª–æ–∂–µ–Ω–∏–µ: {file_type}, file_id: {file_id}]\n"
        if hasattr(message, 'caption') and message.caption:
            msg_text += message.caption
        elif hasattr(message, 'text') and message.text and message.content_type == 'text':
            msg_text += message.text
        if not msg_text.strip():
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        contact_id = add_contact(str(chat_id), contact, msg_text)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
        # –§–æ—Ä–º–∏—Ä—É–µ–º admin_msg —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
        if file_id:
            admin_msg = (
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact}\nID: {chat_id}\n\n"
                f"–í–ª–æ–∂–µ–Ω–∏–µ: [{file_type}, file_id: {file_id}]\n"
            )
            text_only = msg_text.replace(f"[–í–ª–æ–∂–µ–Ω–∏–µ: {file_type}, file_id: {file_id}]\n", "").strip()
            if text_only:
                admin_msg += f"\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n{text_only}\n"
        else:
            admin_msg = (
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact}\nID: {chat_id}\n\n"
                f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n{msg_text.strip()}\n"
            )
        admin_msg += "\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –æ–±—Ä–∞—â–µ–Ω–∏–π."
        bot.send_message(ADMIN_ID, admin_msg)
        if file_id:
            if file_type == 'photo':
                bot.send_photo(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'document':
                bot.send_document(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'voice':
                bot.send_voice(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'audio':
                bot.send_audio(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'video_note':
                bot.send_video_note(ADMIN_ID, file_id)
                bot.send_message(ADMIN_ID, f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'sticker':
                bot.send_sticker(ADMIN_ID, file_id)
                bot.send_message(ADMIN_ID, f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
        clear_user_data(chat_id)

    @bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ")
    def handle_about_teacher(message):
        text = (
            "üë®‚Äçüè´ <b>–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞, –º–Ω–µ 19 –ª–µ—Ç. –Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ –≥–æ–¥–∞\n"
            "–≤ –∫—Ä—É–ø–Ω–æ–π –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ –∏ —Å—Ç—É–¥–µ–Ω—Ç 4 –∫—É—Ä—Å–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ¬´–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞¬ª.\n\n"
            "üë®‚Äçüíª –ü–æ–º–∏–º–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚Äî –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —ç—Ç–æ –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å.\n"
            "üë¶ –Ø –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–∂—É –æ–±—â–∏–π —è–∑—ã–∫ —Å –¥–µ—Ç—å–º–∏, —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —É—á–∏—Ç–µ–ª–µ–º, –∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –∏ –¥—Ä—É–≥–æ–º.\n"
            "üß† –ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, –±–µ–∑ —Å–∫—É—á–Ω—ã—Ö –ª–µ–∫—Ü–∏–π ‚Äî —É—á–∏–º —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –∏–Ω—Ç–µ—Ä–µ—Å.\n\n"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã")
    def handle_prices_formats(message):
        text = (
            "üí∞ <b>–§–æ—Ä–º–∞—Ç –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π</b>\n\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 800 —Ä—É–± / 55 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: –æ–Ω–ª–∞–π–Ω (Google Meet)\n"
            "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è.\n"
            "–ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n"
            "üì© –î–ª—è –∑–∞–ø–∏—Å–∏ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
    def handle_available_courses(message):
        courses = get_active_courses()
        if not courses:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n\n"
        for c in courses:
            text += f"<b>{c[1]}</b>\n{c[2]}\n\n"
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
    @error_handler()
    def handle_show_reviews_user(message):
        try:
            reviews = get_reviews_for_publication_with_deleted(limit=5)
            if not reviews or not isinstance(reviews, list):
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üòâ", reply_markup=get_appropriate_menu(message.from_user.id))
                return
            msg = "‚≠ê –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
            for i, review in enumerate(reviews, 1):
                rating, feedback, is_anonymous, parent_name, student_name, course, created_at = review
                from datetime import datetime
                try:
                    dt = datetime.fromisoformat(created_at)
                    date_str = dt.strftime("%d.%m.%Y")
                except:
                    date_str = "–Ω–µ–¥–∞–≤–Ω–æ"
                stars = "‚≠ê" * rating
                if parent_name is None and student_name is None:
                    author = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                    course_display = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                else:
                    author = f"{parent_name} ({student_name})"
                    course_display = course or "[–ö—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω]"
                msg += (
                    f"{i}. {stars} ({rating}/10)\n"
                    f"üìò –ö—É—Ä—Å: {course_display}\n"
                    f"üë§ {author}\n"
                    f"üìù {feedback[:100]}{'...' if len(feedback) > 100 else ''}\n"
                    f"üìÖ {date_str}\n\n"
                )
            msg += "üí¨ –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
            bot.send_message(message.chat.id, msg, reply_markup=get_appropriate_menu(message.from_user.id))
        except Exception as e:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(commands=["start"])
    @error_handler()
    def handle_start(message):
        import time
        start_time = time.time()
        
        security_ok, error_msg = check_user_security(message.from_user.id, "start")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        bot.send_message(
            message.chat.id,
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "–Ø ‚Äî –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–∏—á–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ù–∏–∫–∏—Ç–æ–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
            "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —è —É–º–µ—é ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.",
            reply_markup=menu.get_appropriate_menu(message.from_user.id)
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, message.from_user.id, "START_COMMAND", f"Username: {message.from_user.username}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (start command)")
        
        # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìä User activity: new user {message.from_user.id} started bot")

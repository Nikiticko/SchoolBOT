# === handlers/commands.py ===
from telebot import types
import utils.menu as menu
from data.db import (
    get_application_by_tg_id, format_date_for_display, get_active_courses, get_cancelled_count_by_tg_id, get_finished_count_by_tg_id, get_all_archive, archive_application, get_last_contact_time, add_contact, update_application, delete_application_by_tg_id, get_reviews_for_publication_with_deleted
)
from utils.logger import log_user_action, log_error, setup_logger
from state.users import get_user_data, set_user_data, update_user_data, clear_user_data
from config import ADMIN_ID
from utils.security import check_user_security, validate_user_input, security_manager
from utils.decorators import error_handler, ensure_text_message, ensure_stage
from utils.menu import get_appropriate_menu, is_admin

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    logger = setup_logger('commands')
    register(bot, logger)

def register(bot, logger):  

    @bot.message_handler(commands=["help"])
    @error_handler()
    def handle_help(message):
        import time
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "help")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        help_text = (
            "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
            "üìù <b>–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ'\n"
            "‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã\n\n"
            "üìÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ'\n"
            "‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –¥–∞—Ç—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ\n\n"
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "‚ùå <b>–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É'\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã\n\n"
            "üÜò <b>–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω—É:</b>\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É'\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n"
            "‚ÑπÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            "‚Ä¢ '‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ' - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ\n"
            "‚Ä¢ 'üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã' - —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã' - —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤"
        )
        
        bot.send_message(message.chat.id, help_text, parse_mode="HTML")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, message.from_user.id, "HELP_COMMAND", f"Username: {message.from_user.username}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (help command)")

    @bot.message_handler(func=lambda m: m.text == "üìÖ –ú–æ–µ –∑–∞–Ω—è—Ç–∏–µ")
    @error_handler()
    def handle_my_lesson(message):
        import time
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "my_lesson")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        application = get_application_by_tg_id(str(chat_id))
        
        if not application:
            bot.send_message(chat_id, "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!", reply_markup=menu.get_appropriate_menu(user.id))
            log_user_action(logger, user.id, "MY_LESSON_NO_APPLICATION", "No active application found")
            return
        
        app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = application
        
        if not lesson_date:
            bot.send_message(chat_id, "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è.", reply_markup=menu.get_appropriate_menu(user.id))
            log_user_action(logger, user.id, "MY_LESSON_PENDING", f"Course: {course}, Status: {status}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = format_date_for_display(lesson_date)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lesson_text = (
            f"üìÖ <b>–í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:</b>\n\n"
            f"üë§ <b>–£—á–µ–Ω–∏–∫:</b> {student_name}\n"
            f"üìò <b>–ö—É—Ä—Å:</b> {course}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {lesson_link}\n\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {status}"
        )
        
        bot.send_message(chat_id, lesson_text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(user.id))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, user.id, "MY_LESSON_VIEWED", f"Course: {course}, Date: {formatted_date}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (my_lesson command)")
        
        # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìä Lesson viewed: user {user.id} viewed lesson for course {course}")

    @bot.callback_query_handler(func=lambda c: c.data == "edit_application")
    def handle_edit_application(call):
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "edit_application")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if app[9] == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        parent_name = app[2]
        student_name = app[3]
        age = app[4]
        contact = app[5]
        course = app[6]
        user = call.from_user
        fields = [
            ("–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è", "parent_name"),
            ("–ò–º—è —É—á–µ–Ω–∏–∫–∞", "student_name"),
            ("–í–æ–∑—Ä–∞—Å—Ç", "age"),
            ("–ö—É—Ä—Å", "course")
        ]
        # –ö–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ username
        if not user.username:
            fields.append(("–ö–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)", "contact"))
        markup = types.InlineKeyboardMarkup()
        for label, key in fields:
            markup.add(types.InlineKeyboardButton(label, callback_data=f"edit_field:{key}"))
        bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
        set_user_data(chat_id, {"edit_app": True, "app_id": app[0], "parent_name": parent_name, "student_name": student_name, "age": age, "contact": contact, "course": course})
        log_user_action(logger, call.from_user.id, "edit_application_started")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_field:"))
    def handle_edit_field(call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "edit_field")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        chat_id = call.message.chat.id
        field = call.data.split(":")[1]
        
        user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        set_user_data(chat_id, {"editing_field": field})
        field_names = {
            "parent_name": "–∏–º—è —Ä–æ–¥–∏—Ç–µ–ª—è",
            "student_name": "–∏–º—è —É—á–µ–Ω–∏–∫–∞", 
            "age": "–≤–æ–∑—Ä–∞—Å—Ç",
            "contact": "–∫–æ–Ω—Ç–∞–∫—Ç",
            "course": "–∫—É—Ä—Å"
        }
        
        bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names.get(field, field)}:")
        bot.register_next_step_handler(call.message, process_edit_field)
        log_user_action(logger, call.from_user.id, f"edit_field_{field}")

    def process_edit_field(message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(message.from_user.id, "process_edit_field")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        chat_id = message.chat.id
        
        user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        
        field = get_user_data(chat_id).get("editing_field")
        new_value = message.text.strip()
        
        if not new_value:
            bot.send_message(chat_id, "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        update_user_data(chat_id, {field: new_value})
        clear_user_data(chat_id, "editing_field")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        app_data = get_user_data(chat_id)
        msg = (
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {app_data['parent_name']}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {app_data['student_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {app_data['age']}\n"
            f"üìò –ö—É—Ä—Å: {app_data['course']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {app_data.get('contact', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
        )
        
        bot.send_message(chat_id, msg, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "save_edit")
    def handle_save_edit(call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "save_edit")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        chat_id = call.message.chat.id
        
        user_data = get_user_data(chat_id)
        if not user_data or not user_data.get("edit_app"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        try:
            app_data = get_user_data(chat_id)
            update_application(
                app_data["app_id"],
                app_data["parent_name"],
                app_data["student_name"], 
                app_data["age"],
                app_data.get("contact", ""),
                app_data["course"]
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            clear_user_data(chat_id)
            
            bot.send_message(chat_id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            log_user_action(logger, call.from_user.id, "application_updated")
            
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            log_error(logger, e, f"Error updating application for user {call.from_user.id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_edit")
    def handle_cancel_edit(call):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "cancel_edit")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        chat_id = call.message.chat.id
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        clear_user_data(chat_id)
        
        bot.send_message(chat_id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
        log_user_action(logger, call.from_user.id, "edit_cancelled")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_application")
    def handle_cancel_application(call):
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if app[9] == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            return
        
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"cancel_app_stage": True})
        bot.register_next_step_handler(msg, process_cancel_reason)

    def process_cancel_reason(message):
        chat_id = message.chat.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_application"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_application"))
        set_user_data(chat_id, {"cancel_reason": reason})
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_application")
    def handle_confirm_cancel_application(call):
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "confirm_cancel_application")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if app[9] == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        
        reason = get_user_data(chat_id).get("cancel_reason", "")
        
        try:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
            delete_application_by_tg_id(chat_id)
            bot.send_message(chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            parent_name = app[2] if app else '-'
            student_name = app[3] if app else '-'
            course = app[6] if app else '-'
            msg = (
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            bot.send_message(ADMIN_ID, msg)
            clear_user_data(chat_id)
            log_user_action(logger, call.from_user.id, "cancelled_application")
            
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            log_error(logger, e, f"Error cancelling application for user {chat_id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_application")
    def handle_cancel_cancel_application(call):
        chat_id = call.message.chat.id
        clear_user_data(chat_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("course_info:"))
    def show_course_info(call):
        try:
            course_id = int(call.data.split(":")[1])
            courses = get_active_courses()
            course = next((c for c in courses if c[0] == course_id), None)

            if course:
                name = course[1]
                description = course[2]
                msg = f"üìò *{name}*\n\nüìù {description}"
                bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=menu.get_appropriate_menu(call.from_user.id))
                log_user_action(logger, call.from_user.id, "course_info_viewed", f"course: {name}")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
                log_user_action(logger, call.from_user.id, "course_not_found", f"course_id: {course_id}")
        except Exception as e:
            log_error(logger, e, f"Course info for user {call.from_user.id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_lesson_user")
    def handle_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞:", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"cancel_lesson_stage": True})
        bot.register_next_step_handler(msg, process_cancel_lesson_reason)

    def process_cancel_lesson_reason(message):
        chat_id = message.chat.id
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        reason = getattr(message, 'text', '').strip()
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_cancel_lesson_user"))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel_lesson_user"))
        set_user_data(chat_id, {"cancel_lesson_reason": reason})
        bot.send_message(chat_id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫?\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data == "confirm_cancel_lesson_user")
    def handle_confirm_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_ok, error_msg = check_user_security(call.from_user.id, "confirm_cancel_lesson_user")
        if not security_ok:
            bot.answer_callback_query(call.id, f"üö´ {error_msg}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        app = get_application_by_tg_id(str(chat_id))
        if not app:
            bot.send_message(chat_id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if app[9] != "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
            bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —É—Ä–æ–∫.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            return
        
        reason = get_user_data(chat_id).get("cancel_lesson_reason", "")
        
        try:
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
            archive_application(app[0], cancelled_by="user", comment=reason, archived_status="–£—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω")
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –ë–î
            delete_application_by_tg_id(chat_id)
            bot.send_message(chat_id, "‚úÖ –í–∞—à —É—Ä–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            parent_name = app[2] if app else '-'
            student_name = app[3] if app else '-'
            course = app[6] if app else '-'
            msg = (
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É—Ä–æ–∫\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            bot.send_message(ADMIN_ID, msg)
            clear_user_data(chat_id)
            log_user_action(logger, call.from_user.id, "cancelled_lesson")
            
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=menu.get_appropriate_menu(call.from_user.id))
            clear_user_data(chat_id)
            log_error(logger, e, f"Error cancelling lesson for user {chat_id}")

    @bot.callback_query_handler(func=lambda c: c.data == "cancel_cancel_lesson_user")
    def handle_cancel_cancel_lesson_user(call):
        chat_id = call.message.chat.id
        clear_user_data(chat_id)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞.", reply_markup=menu.get_appropriate_menu(call.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üÜò –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω—É")
    def handle_contact_admin(message):
        from data.db import get_last_contact_time, add_contact
        import datetime
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
        security_ok, error_msg = check_user_security(message.from_user.id, "contact_admin")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        last_time = get_last_contact_time(str(chat_id))
        if last_time:
            last_dt = datetime.datetime.fromisoformat(last_time)
            if (datetime.datetime.now() - last_dt).total_seconds() < 20*60:
                bot.send_message(chat_id, "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
                return
        bot.send_message(chat_id, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'.", reply_markup=menu.get_cancel_button())
        set_user_data(chat_id, {"contact_fsm": True})
        bot.register_next_step_handler(message, process_contact_message)

    def process_contact_message(message):
        from data.db import add_contact
        chat_id = message.chat.id
        user = message.from_user
        if hasattr(message, 'text') and message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(chat_id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        contact = f"@{user.username}" if user.username else (get_user_data(chat_id).get("phone") or str(chat_id))
        allowed_types = ["photo", "document", "audio", "voice", "video_note", "sticker"]
        forbidden_types = ["video", "animation"]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ media_group (–∞–ª—å–±–æ–º)
        if hasattr(message, 'media_group_id') and message.media_group_id:
            bot.send_message(chat_id, "üö´ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        present_types = 0
        file_id = None
        file_type = None
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_type = 'photo'
            present_types += 1
        if message.content_type == 'document':
            file_id = message.document.file_id
            file_type = 'document'
            present_types += 1
        if message.content_type == 'voice':
            file_id = message.voice.file_id
            file_type = 'voice'
            present_types += 1
        if message.content_type == 'audio':
            file_id = message.audio.file_id
            file_type = 'audio'
            present_types += 1
        if message.content_type == 'video_note':
            file_id = message.video_note.file_id
            file_type = 'video_note'
            present_types += 1
        if message.content_type == 'sticker':
            file_id = message.sticker.file_id
            file_type = 'sticker'
            present_types += 1
        if message.content_type in forbidden_types:
            bot.send_message(chat_id, "üö´ –í–∏–¥–µ–æ –∏ GIF (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–ª–æ–∂–µ–Ω–∏—è ‚Äî –æ—Ç–∫–∞–∑
        if present_types > 1:
            bot.send_message(chat_id, "üö´ –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            clear_user_data(chat_id)
            return
        msg_text = ""
        if file_id:
            msg_text += f"[–í–ª–æ–∂–µ–Ω–∏–µ: {file_type}, file_id: {file_id}]\n"
        if hasattr(message, 'caption') and message.caption:
            msg_text += message.caption
        elif hasattr(message, 'text') and message.text and message.content_type == 'text':
            msg_text += message.text
        if not msg_text.strip():
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        contact_id = add_contact(str(chat_id), contact, msg_text)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
        # –§–æ—Ä–º–∏—Ä—É–µ–º admin_msg —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
        if file_id:
            admin_msg = (
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact}\nID: {chat_id}\n\n"
                f"–í–ª–æ–∂–µ–Ω–∏–µ: [{file_type}, file_id: {file_id}]\n"
            )
            text_only = msg_text.replace(f"[–í–ª–æ–∂–µ–Ω–∏–µ: {file_type}, file_id: {file_id}]\n", "").strip()
            if text_only:
                admin_msg += f"\n–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n{text_only}\n"
        else:
            admin_msg = (
                f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact}\nID: {chat_id}\n\n"
                f"–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:\n{msg_text.strip()}\n"
            )
        admin_msg += "\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –æ–±—Ä–∞—â–µ–Ω–∏–π."
        bot.send_message(ADMIN_ID, admin_msg)
        if file_id:
            if file_type == 'photo':
                bot.send_photo(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'document':
                bot.send_document(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'voice':
                bot.send_voice(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'audio':
                bot.send_audio(ADMIN_ID, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'video_note':
                bot.send_video_note(ADMIN_ID, file_id)
                bot.send_message(ADMIN_ID, f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
            elif file_type == 'sticker':
                bot.send_sticker(ADMIN_ID, file_id)
                bot.send_message(ADMIN_ID, f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {contact}")
        clear_user_data(chat_id)

    @bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ")
    def handle_about_teacher(message):
        text = (
            "üë©‚Äç <b>–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ</b>\n\n"
            "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞, —è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã.\n"
            "–ü—Ä–æ–≤–æ–∂—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö.\n\n"
            "üìö –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É.\n"
            "\n–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π: @your_teacher_username"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üí∞ –¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã")
    def handle_prices_formats(message):
        text = (
            "üí∞ <b>–¶–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π</b>\n\n"
            "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 1000 —Ä—É–±/—á–∞—Å\n"
            "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: 700 —Ä—É–±/—á–∞—Å\n"
            "‚Ä¢ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
            "–ó–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω.\n"
            "\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã")
    def handle_available_courses(message):
        courses = get_active_courses()
        if not courses:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.", reply_markup=menu.get_appropriate_menu(message.from_user.id))
            return
        text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:</b>\n\n"
        for c in courses:
            text += f"<b>{c[1]}</b>\n{c[2]}\n\n"
        bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=menu.get_appropriate_menu(message.from_user.id))

    @bot.message_handler(func=lambda m: m.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
    @error_handler()
    def handle_show_reviews_user(message):
        try:
            reviews = get_reviews_for_publication_with_deleted(limit=5)
            if not reviews or not isinstance(reviews, list):
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üòä", reply_markup=get_appropriate_menu(message.from_user.id))
                return
            msg = "‚≠ê –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
            for i, review in enumerate(reviews, 1):
                rating, feedback, is_anonymous, parent_name, student_name, course, created_at = review
                from datetime import datetime
                try:
                    dt = datetime.fromisoformat(created_at)
                    date_str = dt.strftime("%d.%m.%Y")
                except:
                    date_str = "–Ω–µ–¥–∞–≤–Ω–æ"
                stars = "‚≠ê" * rating
                if parent_name is None and student_name is None:
                    author = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                    course_display = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                else:
                    author = f"{parent_name} ({student_name})"
                    course_display = course or "[–ö—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω]"
                msg += (
                    f"{i}. {stars} ({rating}/10)\n"
                    f"üìò –ö—É—Ä—Å: {course_display}\n"
                    f"üë§ {author}\n"
                    f"üìù {feedback[:100]}{'...' if len(feedback) > 100 else ''}\n"
                    f"üìÖ {date_str}\n\n"
                )
            msg += "üí¨ –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
            bot.send_message(message.chat.id, msg, reply_markup=get_appropriate_menu(message.from_user.id))
        except Exception as e:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(commands=["start"])
    @error_handler()
    def handle_start(message):
        import time
        start_time = time.time()
        
        security_ok, error_msg = check_user_security(message.from_user.id, "start")
        if not security_ok:
            bot.send_message(message.chat.id, f"üö´ {error_msg}")
            return
        
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=menu.get_appropriate_menu(message.from_user.id)
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(logger, message.from_user.id, "START_COMMAND", f"Username: {message.from_user.username}")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        response_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è Handler response time: {response_time:.3f}s (start command)")
        
        # –ë–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∏
        logger.info(f"üìä User activity: new user {message.from_user.id} started bot")

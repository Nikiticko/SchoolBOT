from telebot import types, TeleBot
from telebot.types import Message, CallbackQuery
from config import ADMIN_ID
from data.db import (
    get_pending_applications,
    clear_applications,
    update_application_lesson,
    get_application_by_id,
    format_date_for_display,
    validate_date_format,
    get_all_applications,
    get_all_archive,
    get_open_contacts,
    reply_to_contact,
    get_contact_by_id,
    ban_user_by_contact,
    get_all_reviews,
    get_review_stats,
    clear_reviews,
    get_all_courses,
    clear_courses,
    get_all_contacts,
    get_database_stats,
    migrate_database,
    clear_archive
)
from state.users import writing_ids
import utils.menu as menu
from openpyxl.utils import get_column_letter
import tempfile
import os
import re
import openpyxl
from utils.logger import setup_logger, log_bot_startup, log_bot_shutdown, log_error, log_admin_action
from utils.security import log_security_event
from utils.menu import create_admin_menu, create_confirm_menu

logger = setup_logger('admin')

def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

def notify_admin_new_application(bot, application_data):
    try:
        notification = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            f"üë§ –ò–º—è: {application_data.get('parent_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {application_data.get('student_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {application_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö –ö—É—Ä—Å: {application_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {application_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        bot.send_message(ADMIN_ID, notification)
        print(f"[‚úÖ] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")


def register(bot, logger):
    @bot.message_handler(commands=["security_report"])
    def handle_security_report(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command security_report")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            report = security_logger.get_security_report(hours=24)
            
            report_text = (
                "üîí –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):\n\n"
                f"üö´ –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {report.get('failed_logins', 0)}\n"
                f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {report.get('suspicious_activities', 0)}\n"
                f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit: {report.get('rate_limit_exceeded', 0)}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {report.get('user_bans', 0)}\n"
                f"üö™ –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {report.get('unauthorized_access', 0)}\n"
                f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {report.get('input_validation_failed', 0)}\n\n"
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            total_events = sum(report.values())
            if total_events == 0:
                report_text += "\n‚úÖ –í—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ, —É–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            elif total_events < 10:
                report_text += "\nüü° –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑"
            elif total_events < 50:
                report_text += "\nüü† –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑"
            else:
                report_text += "\nüî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑!"
            
            bot.send_message(message.chat.id, report_text)
            logger.info(f"Admin {message.from_user.id} requested security report")
            
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")
            logger.error(f"Error in security report: {e}")

    @bot.message_handler(commands=["ClearApplications"])
    def handle_clear_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearApplications")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearApplications")

    @bot.message_handler(commands=["ClearArchive"])
    def handle_clear_archive_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearArchive")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="confirm_clear_archive"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_archive")
        )
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=markup
        )
        logger.info(f"Admin {message.from_user.id} initiated ClearArchive")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_archive", "cancel_clear_archive"])
    def handle_clear_archive_confirm(call):
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm archive clear without admin rights")
            return

        if call.data == "confirm_clear_archive":
            clear_archive()
            bot.send_message(call.message.chat.id, "üßπ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
            logger.info(f"Admin {call.from_user.id} cleared archive")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled archive clear")

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
    def handle_clear_confirm(call):
        chat_id = call.message.chat.id
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm clear without admin rights")
            return

        if call.data == "confirm_clear":
            clear_applications()
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"Admin {call.from_user.id} cleared all applications")
        else:
            bot.send_message(chat_id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled clear")

    @bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫" and is_admin(m.from_user.id))
    def handle_pending_applications(message):
        try:
            applications = get_pending_applications()
            if not applications:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã")
                return

            for app in applications:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = app
                formatted_created = format_date_for_display(created_at)
                # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                if status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                    status_str = "–ù–∞–∑–Ω–∞—á–µ–Ω–æ"
                else:
                    status_str = "–û–∂–∏–¥–∞–µ—Ç"
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_str}\n"
                    f"üïí –°–æ–∑–¥–∞–Ω–æ: {formatted_created}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üïí –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed pending applications")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}")
            logger.error(f"Error in handle_pending_applications: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("assign:"))
    def handle_assign_callback(call):
        app_id = int(call.data.split(":")[1])
        writing_ids.add(call.from_user.id)
        bot.send_message(call.message.chat.id, f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):", reply_markup=menu.get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: get_link(m, app_id))

    def get_link(message, app_id):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            menu.handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        date_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        is_valid, result = validate_date_format(date_text)
        
        if not is_valid:
            bot.send_message(
                message.chat.id, 
                f"‚ùå {result}\n\nüìÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):",
                reply_markup=menu.get_cancel_button()
            )
            bot.register_next_step_handler(message, lambda m: get_link(m, app_id))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        user_data['valid_date'] = result
        message._user_data = user_data
        
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:", reply_markup=menu.get_cancel_button())
        bot.register_next_step_handler(message, lambda m: finalize_lesson(m, app_id, date_text))

    def finalize_lesson(message, app_id, date_text):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            menu.handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        link = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        valid_date = user_data.get('valid_date')
        
        if valid_date:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É (datetime –æ–±—ä–µ–∫—Ç)
            update_application_lesson(app_id, valid_date, link)
            formatted_date = format_date_for_display(valid_date)
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
            update_application_lesson(app_id, date_text, link)
            formatted_date = date_text
        
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω!\nüìÖ {formatted_date}\nüîó {link}", reply_markup=menu.get_admin_menu())

        app = get_application_by_id(app_id)
        if app:
            tg_id = app[1]
            course = app[6]
            try:
                bot.send_message(
                    int(tg_id),
                    f"üìÖ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–∫!\nüìò –ö—É—Ä—Å: {course}\nüóì –î–∞—Ç–∞: {formatted_date}\nüîó –°—Å—ã–ª–∫–∞: {link}"
                )
                logger.info(f"Lesson notification sent to user {tg_id}")
            except Exception as e:
                logger.error(f"Failed to notify user {tg_id}: {e}")

        writing_ids.discard(message.from_user.id)
        logger.info(f"Admin {message.from_user.id} assigned lesson for application {app_id}")

    @bot.message_handler(func=lambda m: m.text == "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã" and is_admin(m.from_user.id))
    def handle_course_menu(message):
        markup = menu.get_course_editor_menu()
        bot.send_message(message.chat.id, "üéì –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and is_admin(m.from_user.id))
    def handle_export_data(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏", callback_data="export_applications"),
            types.InlineKeyboardButton("–ê—Ä—Ö–∏–≤", callback_data="export_archive")
        )
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data in ["export_applications", "export_archive"])
    def handle_export_choice(call):
        if call.data == "export_applications":
            data = get_all_applications()
            filename = "applications_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ"
            ]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            rows = []
            for row in data:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = row
                if status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                    status_str = "–ù–∞–∑–Ω–∞—á–µ–Ω–æ"
                else:
                    status_str = "–û–∂–∏–¥–∞–µ—Ç"
                rows.append([
                    app_id, tg_id, parent_name, student_name, age, contact, course,
                    lesson_date, lesson_link, status_str, created_at
                ])
        else:
            data = get_all_archive()
            filename = "archive_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ", "–ö–µ–º –æ—Ç–º–µ–Ω–µ–Ω–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ]
            rows = data
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(headers)
        for row in rows:
            ws.append(row)
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_length = 0
            col_letter = get_column_letter(col[0].column)
            for cell in col:
                try:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                except:
                    pass
            ws.column_dimensions[col_letter].width = max_length + 2
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            wb.save(tmp.name)
            tmp_path = tmp.name
        with open(tmp_path, "rb") as f:
            bot.send_document(call.message.chat.id, f, visible_file_name=filename)
        os.remove(tmp_path)
        bot.answer_callback_query(call.id, "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    @bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and is_admin(m.from_user.id))
    def handle_contacts_menu(message):
        contacts = get_open_contacts()
        if not contacts:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=menu.get_admin_menu())
            return
        for c in contacts:
            contact_id, user_tg_id, user_contact, msg, admin_reply, status, created_at, reply_at, banned, ban_reason = c
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ
            file_match = re.match(r"\[–í–ª–æ–∂–µ–Ω–∏–µ: (\w+), file_id: ([\w\-_]+)\](.*)", msg, re.DOTALL)
            if file_match:
                file_type, file_id, caption = file_match.groups()
                caption = caption.strip() or None
                if file_type == 'photo':
                    bot.send_photo(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'document':
                    bot.send_document(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'voice':
                    bot.send_voice(message.chat.id, file_id)
                elif file_type == 'video':
                    bot.send_video(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'video_note':
                    bot.send_video_note(message.chat.id, file_id)
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                text = (
                    f"üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_contact} (ID: {user_tg_id})\n"
                    f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"\n–¢–µ–∫—Å—Ç: (—Å–º. –≤–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ)"
                )
            else:
                text = (
                    f"üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_contact} (ID: {user_tg_id})\n"
                    f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"\n–¢–µ–∫—Å—Ç: {msg}"
                )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_contact:{contact_id}"))
            markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_contact:{user_tg_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("reply_contact:"))
    def handle_reply_contact(call):
        contact_id = int(call.data.split(":")[1])
        bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=menu.get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: process_admin_reply(m, contact_id))

    def process_admin_reply(message, contact_id):
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=menu.get_admin_menu())
            return
        reply_to_contact(contact_id, message.text)
        contact = get_contact_by_id(contact_id)
        user_tg_id = contact[1]
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=menu.get_admin_menu())
        bot.send_message(int(user_tg_id), f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("ban_contact:"))
    def handle_ban_contact(call):
        user_tg_id = call.data.split(":")[1]
        bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=menu.get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: process_ban_reason(m, user_tg_id))

    def process_ban_reason(message, user_tg_id):
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "–ë–∞–Ω –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=menu.get_admin_menu())
            return
        reason = message.text.strip()
        from data.db import ban_user_by_contact
        ban_user_by_contact(user_tg_id, reason)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=menu.get_admin_menu())
        try:
            bot.send_message(int(user_tg_id), f"üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –∞–¥–º–∏–Ω—É.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –±–∞–Ω–µ: {e}")

    @bot.message_handler(commands=["ClearContacts"])
    def handle_clear_contacts(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearContacts")
            return
        from data.db import clear_contacts
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="confirm_clear_contacts"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_contacts")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearContacts")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_contacts", "cancel_clear_contacts"])
    def handle_clear_contacts_confirm(call):
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm clear contacts without admin rights")
            return
        from data.db import clear_contacts
        if call.data == "confirm_clear_contacts":
            clear_contacts()
            bot.send_message(call.message.chat.id, "üßπ –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"Admin {call.from_user.id} cleared all contacts")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled contacts clear")

    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–¢–ó–´–í–û–í ===
    
    @bot.message_handler(func=lambda m: m.text == "‚≠ê –û—Ç–∑—ã–≤—ã" and is_admin(m.from_user.id))
    def handle_reviews_menu(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏"""
        try:
            stats = get_review_stats()
            total_reviews, avg_rating, positive_reviews, negative_reviews = stats
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ avg_rating –Ω–µ None
            avg_rating_display = f"{avg_rating:.1f}" if avg_rating is not None else "0.0"
            
            msg = (
                "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating_display}/10\n"
                f"‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö (8-10): {positive_reviews}\n"
                f"‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö (1-5): {negative_reviews}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                "üí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ClearReviews"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã", callback_data="view_all_reviews"),
                types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="review_stats")
            )
            
            bot.send_message(message.chat.id, msg, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} opened reviews menu")
            
        except Exception as e:
            logger.error(f"Error in handle_reviews_menu: {e}")
    
    @bot.callback_query_handler(func=lambda c: c.data == "view_all_reviews")
    def handle_view_all_reviews(call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∑—ã–≤—ã"""
        try:
            reviews = get_all_reviews()
            if not reviews:
                bot.send_message(call.message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
                return
            batch_size = 10
            for batch_start in range(0, len(reviews), batch_size):
                msg = "üìã –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n"
                for i, review in enumerate(reviews[batch_start:batch_start+batch_size], batch_start+1):
                    review_id, rating, feedback, is_anonymous, parent_name, student_name, course, created_at, user_tg_id = review
                    from datetime import datetime
                    try:
                        dt = datetime.fromisoformat(created_at)
                        date_str = dt.strftime("%d.%m.%Y %H:%M")
                    except:
                        date_str = "–Ω–µ–¥–∞–≤–Ω–æ"
                    stars = "‚≠ê" * rating
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞
                    if is_anonymous:
                        author = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π"
                    elif parent_name is None and student_name is None and course is None:
                        # –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –Ω–æ –æ—Ç–∑—ã–≤ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        author = f"[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞] ID: {user_tg_id}"
                    else:
                        author = f"{parent_name} ({student_name})"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É—Ä—Å
                    if course is None:
                        course = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                    
                    feedback_display = feedback[:80] + ("..." if feedback and len(feedback) > 80 else "")
                    if not feedback_display.strip():
                        feedback_display = "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞"
                    
                    msg += (
                        f"{i}. {stars} ({rating}/10)\n"
                        f"üìò –ö—É—Ä—Å: {course}\n"
                        f"üë§ {author}\n"
                        f"üìù {feedback_display}\n"
                        f"üìÖ {date_str}\n"
                        f"üÜî ID: {review_id}\n\n"
                    )
                bot.send_message(call.message.chat.id, msg)
            logger.info(f"Admin {call.from_user.id} viewed all reviews")
        except Exception as e:
            logger.error(f"Error in handle_view_all_reviews: {e}")
    
    @bot.callback_query_handler(func=lambda c: c.data == "review_stats")
    def handle_review_stats(call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            stats = get_review_stats()
            total_reviews, avg_rating, positive_reviews, negative_reviews = stats
            
            if total_reviews == 0:
                bot.send_message(call.message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            positive_percent = (positive_reviews / total_reviews) * 100 if total_reviews > 0 else 0
            negative_percent = (negative_reviews / total_reviews) * 100 if total_reviews > 0 else 0
            neutral_percent = 100 - positive_percent - negative_percent
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ avg_rating –Ω–µ None
            avg_rating_display = f"{avg_rating:.1f}" if avg_rating is not None else "0.0"
            avg_rating_value = avg_rating if avg_rating is not None else 0
            
            msg = (
                "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤\n\n"
                f"üìà –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating_display}/10\n\n"
                f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n"
                f"‚Ä¢ –û—Ç–ª–∏—á–Ω–æ (8-10): {positive_reviews} ({positive_percent:.1f}%)\n"
                f"‚Ä¢ –•–æ—Ä–æ—à–æ (6-7): {total_reviews - positive_reviews - negative_reviews} ({neutral_percent:.1f}%)\n"
                f"‚Ä¢ –ü–ª–æ—Ö–æ (1-5): {negative_reviews} ({negative_percent:.1f}%)\n\n"
                f"üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            )
            
            if avg_rating_value >= 8:
                msg += "üåü –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            elif avg_rating_value >= 6:
                msg += "üëç –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."
            else:
                msg += "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫–∞—á–µ—Å—Ç–≤—É —É—Å–ª—É–≥."
            
            bot.send_message(call.message.chat.id, msg)
            logger.info(f"Admin {call.from_user.id} viewed review statistics")
            
        except Exception as e:
            logger.error(f"Error in handle_review_stats: {e}")
    
    @bot.message_handler(commands=["ClearReviews"])
    def handle_clear_reviews_command(message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearReviews")
            return
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_reviews"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_reviews")
        )
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=markup
        )
        logger.info(f"Admin {message.from_user.id} initiated ClearReviews command")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_reviews", "cancel_clear_reviews"])
    def handle_clear_reviews_confirm(call):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –æ—á–∏—Å—Ç–∫—É –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            if not is_admin(call.from_user.id):
                logger.warning(f"User {call.from_user.id} tried to confirm clear reviews without admin rights")
                return
                
            if call.data == "confirm_clear_reviews":
                clear_reviews()
                bot.send_message(call.message.chat.id, "üßπ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
                logger.info(f"Admin {call.from_user.id} cleared all reviews")
            else:
                bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                logger.info(f"Admin {call.from_user.id} cancelled reviews clear")
                
        except Exception as e:
            logger.error(f"Error in handle_clear_reviews_confirm: {e}")

def register_admin_handlers(bot: TeleBot):
    @bot.message_handler(commands=['admin'])
    def admin_command(message: Message):
        if str(message.from_user.id) != ADMIN_ID:
            log_security_event(f"Unauthorized admin access attempt by {message.from_user.id}")
            return
        
        log_admin_action(logger, message.from_user.id, "Admin panel accessed")
        bot.reply_to(message, "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=create_admin_menu())

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
    def handle_admin_callback(call: CallbackQuery):
        if str(call.from_user.id) != ADMIN_ID:
            log_security_event(f"Unauthorized admin callback by {call.from_user.id}")
            return
        
        action = call.data.split('_')[1]
        log_admin_action(logger, call.from_user.id, f"Admin action '{action}'")
        
        if action == 'applications':
            show_applications(bot, call.message)
        elif action == 'archive':
            show_archive(bot, call.message)
        elif action == 'courses':
            show_courses(bot, call.message)
        elif action == 'contacts':
            show_contacts(bot, call.message)
        elif action == 'reviews':
            show_reviews(bot, call.message)
        elif action == 'clear_applications':
            confirm_clear_applications(bot, call.message)
        elif action == 'clear_archive':
            confirm_clear_archive(bot, call.message)
        elif action == 'clear_courses':
            confirm_clear_courses(bot, call.message)
        elif action == 'clear_contacts':
            confirm_clear_contacts(bot, call.message)
        elif action == 'clear_reviews':
            confirm_clear_reviews(bot, call.message)
        elif action == 'db_stats':
            show_database_stats(bot, call.message)
        elif action == 'migrate_db':
            migrate_database_action(bot, call.message)
        
        bot.answer_callback_query(call.id)

def show_applications(bot: TeleBot, message: Message):
    applications = get_all_applications()
    if not applications:
        bot.edit_message_text("üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "üìù **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n\n"
    for app in applications[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        text += f"ID: {app[0]}\n"
        text += f"–†–æ–¥–∏—Ç–µ–ª—å: {app[2]}\n"
        text += f"–£—á–µ–Ω–∏–∫: {app[3]} ({app[4]} –ª–µ—Ç)\n"
        text += f"–ö—É—Ä—Å: {app[6]}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {app[10]}\n"
        text += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {app[11]}\n"
        text += "‚îÄ" * 30 + "\n"
    
    if len(applications) > 10:
        text += f"\n... –∏ –µ—â–µ {len(applications) - 10} –∑–∞—è–≤–æ–∫"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def show_archive(bot: TeleBot, message: Message):
    archive = get_all_archive()
    if not archive:
        bot.edit_message_text("üóÑÔ∏è –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "üóÑÔ∏è **–ê—Ä—Ö–∏–≤:**\n\n"
    for record in archive[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        text += f"ID: {record[0]}\n"
        text += f"–†–æ–¥–∏—Ç–µ–ª—å: {record[2]}\n"
        text += f"–£—á–µ–Ω–∏–∫: {record[3]} ({record[4]} –ª–µ—Ç)\n"
        text += f"–ö—É—Ä—Å: {record[6]}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {record[10]}\n"
        text += f"–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {record[12]}\n"
        text += "‚îÄ" * 30 + "\n"
    
    if len(archive) > 10:
        text += f"\n... –∏ –µ—â–µ {len(archive) - 10} –∑–∞–ø–∏—Å–µ–π"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def show_courses(bot: TeleBot, message: Message):
    courses = get_all_courses()
    if not courses:
        bot.edit_message_text("üìö –ù–µ—Ç –∫—É—Ä—Å–æ–≤", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "üìö **–ö—É—Ä—Å—ã:**\n\n"
    for course in courses:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if course[3] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += f"ID: {course[0]}\n"
        text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {course[1]}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {course[2]}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        text += "‚îÄ" * 30 + "\n"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def show_contacts(bot: TeleBot, message: Message):
    contacts = get_all_contacts()
    if not contacts:
        bot.edit_message_text("üìû –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "üìû **–û–±—Ä–∞—â–µ–Ω–∏—è:**\n\n"
    for contact in contacts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        text += f"ID: {contact[0]}\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {contact[1]}\n"
        text += f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact[2]}\n"
        text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {contact[3][:50]}...\n"
        text += f"–°—Ç–∞—Ç—É—Å: {contact[5]}\n"
        text += f"–î–∞—Ç–∞: {contact[6]}\n"
        text += "‚îÄ" * 30 + "\n"
    
    if len(contacts) > 10:
        text += f"\n... –∏ –µ—â–µ {len(contacts) - 10} –æ–±—Ä–∞—â–µ–Ω–∏–π"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def show_reviews(bot: TeleBot, message: Message):
    reviews = get_all_reviews()
    if not reviews:
        bot.edit_message_text("‚≠ê –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "‚≠ê **–û—Ç–∑—ã–≤—ã:**\n\n"
    for review in reviews[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
        text += f"ID: {review[0]}\n"
        text += f"–†–µ–π—Ç–∏–Ω–≥: {review[1]}/10\n"
        text += f"–û—Ç–∑—ã–≤: {review[2][:50]}...\n"
        text += f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π: {'–î–∞' if review[3] else '–ù–µ—Ç'}\n"
        text += f"–†–æ–¥–∏—Ç–µ–ª—å: {review[4]}\n"
        text += f"–£—á–µ–Ω–∏–∫: {review[5]}\n"
        text += f"–ö—É—Ä—Å: {review[6]}\n"
        text += f"–î–∞—Ç–∞: {review[7]}\n"
        text += "‚îÄ" * 30 + "\n"
    
    if len(reviews) > 10:
        text += f"\n... –∏ –µ—â–µ {len(reviews) - 10} –æ—Ç–∑—ã–≤–æ–≤"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def show_database_stats(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    stats = get_database_stats()
    if not stats:
        bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î", chat_id=message.chat.id, message_id=message.message_id)
        return
    
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
    text += f"üìù –ó–∞—è–≤–æ–∫: {stats.get('applications_count', 0)}\n"
    text += f"üìö –ö—É—Ä—Å–æ–≤: {stats.get('courses_count', 0)}\n"
    text += f"üìû –û–±—Ä–∞—â–µ–Ω–∏–π: {stats.get('contacts_count', 0)}\n"
    text += f"‚≠ê –û—Ç–∑—ã–≤–æ–≤: {stats.get('reviews_count', 0)}\n"
    text += f"üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ: {stats.get('archive_count', 0)}\n"
    text += f"üíæ –†–∞–∑–º–µ—Ä –ë–î: {stats.get('database_size_mb', 0)} –ú–ë\n"
    text += f"üîç –ò–Ω–¥–µ–∫—Å–æ–≤ –≤ applications: {stats.get('applications_indexes', 0)}\n"
    
    bot.edit_message_text(text, chat_id=message.chat.id, message_id=message.message_id, parse_mode='Markdown')

def migrate_database_action(bot: TeleBot, message: Message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if migrate_database():
            bot.edit_message_text("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", chat_id=message.chat.id, message_id=message.message_id)
        else:
            bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î", chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.error(f"Error during database migration: {e}")
        bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}", chat_id=message.chat.id, message_id=message.message_id)

def confirm_clear_applications(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞—è–≤–æ–∫"""
    bot.edit_message_text(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        chat_id=message.chat.id,
        message_id=message.message_id,
        parse_mode='Markdown',
        reply_markup=create_confirm_menu('clear_applications')
    )

def confirm_clear_archive(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞"""
    bot.edit_message_text(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏ –∏–∑ –∞—Ä—Ö–∏–≤–∞!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        chat_id=message.chat.id,
        message_id=message.message_id,
        parse_mode='Markdown',
        reply_markup=create_confirm_menu('clear_archive')
    )

def confirm_clear_courses(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—É—Ä—Å–æ–≤"""
    bot.edit_message_text(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫—É—Ä—Å—ã!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        chat_id=message.chat.id,
        message_id=message.message_id,
        parse_mode='Markdown',
        reply_markup=create_confirm_menu('clear_courses')
    )

def confirm_clear_contacts(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π"""
    bot.edit_message_text(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        chat_id=message.chat.id,
        message_id=message.message_id,
        parse_mode='Markdown',
        reply_markup=create_confirm_menu('clear_contacts')
    )

def confirm_clear_reviews(bot: TeleBot, message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    bot.edit_message_text(
        "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!**\n\n"
        "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç–∑—ã–≤—ã!\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        chat_id=message.chat.id,
        message_id=message.message_id,
        parse_mode='Markdown',
        reply_markup=create_confirm_menu('clear_reviews')
    )

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    logger = setup_logger('admin')
    register(bot, logger)  # –°—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    register_admin_handlers(bot)  # –ù–æ–≤—ã–µ –∏–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

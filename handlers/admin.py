from telebot import types
from config import ADMIN_ID
from data.db import (
    get_pending_applications,
    clear_applications,
    update_application_lesson,
    get_application_by_id,
    format_date_for_display,
    validate_date_format,
    get_all_applications,
    get_all_archive,
    get_open_contacts,
    reply_to_contact,
    get_contact_by_id,
    ban_user_by_contact
)
from state.users import writing_ids
from data.db import clear_archive
from utils.menu import get_admin_menu, get_cancel_button, handle_cancel_action
import openpyxl
from openpyxl.utils import get_column_letter
import tempfile
import os
import re


def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

def notify_admin_new_application(bot, application_data):
    try:
        notification = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            f"üë§ –ò–º—è: {application_data.get('parent_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {application_data.get('student_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {application_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö –ö—É—Ä—Å: {application_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {application_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        bot.send_message(ADMIN_ID, notification)
        print(f"[‚úÖ] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")


def register(bot, logger):
    @bot.message_handler(commands=["ClearApplications"])
    def handle_clear_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearApplications")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearApplications")

    @bot.message_handler(commands=["ClearArchive"])
    def handle_clear_archive_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearArchive")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="confirm_clear_archive"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_archive")
        )
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=markup
        )
        logger.info(f"Admin {message.from_user.id} initiated ClearArchive")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_archive", "cancel_clear_archive"])
    def handle_clear_archive_confirm(call):
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm archive clear without admin rights")
            return

        if call.data == "confirm_clear_archive":
            clear_archive()
            bot.send_message(call.message.chat.id, "üßπ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
            logger.info(f"Admin {call.from_user.id} cleared archive")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled archive clear")

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
    def handle_clear_confirm(call):
        chat_id = call.message.chat.id
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm clear without admin rights")
            return

        if call.data == "confirm_clear":
            clear_applications()
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"Admin {call.from_user.id} cleared all applications")
        else:
            bot.send_message(chat_id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled clear")

    @bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫" and is_admin(m.from_user.id))
    def handle_pending_applications(message):
        try:
            applications = get_pending_applications()
            if not applications:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã")
                return

            for app in applications:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at = app
                formatted_created = format_date_for_display(created_at)
                # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                if status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                    status_str = "–ù–∞–∑–Ω–∞—á–µ–Ω–æ"
                else:
                    status_str = "–û–∂–∏–¥–∞–µ—Ç"
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_str}\n"
                    f"üïí –°–æ–∑–¥–∞–Ω–æ: {formatted_created}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üïí –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed pending applications")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}")
            logger.error(f"Error in handle_pending_applications: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("assign:"))
    def handle_assign_callback(call):
        app_id = int(call.data.split(":")[1])
        writing_ids.add(call.from_user.id)
        bot.send_message(call.message.chat.id, f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):", reply_markup=get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: get_link(m, app_id))

    def get_link(message, app_id):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        date_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        is_valid, result = validate_date_format(date_text)
        
        if not is_valid:
            bot.send_message(
                message.chat.id, 
                f"‚ùå {result}\n\nüìÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):",
                reply_markup=get_cancel_button()
            )
            bot.register_next_step_handler(message, lambda m: get_link(m, app_id))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        user_data['valid_date'] = result
        message._user_data = user_data
        
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, lambda m: finalize_lesson(m, app_id, date_text))

    def finalize_lesson(message, app_id, date_text):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        link = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        valid_date = user_data.get('valid_date')
        
        if valid_date:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É (datetime –æ–±—ä–µ–∫—Ç)
            update_application_lesson(app_id, valid_date, link)
            formatted_date = format_date_for_display(valid_date)
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
            update_application_lesson(app_id, date_text, link)
            formatted_date = date_text
        
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω!\nüìÖ {formatted_date}\nüîó {link}", reply_markup=get_admin_menu())

        app = get_application_by_id(app_id)
        if app:
            tg_id = app[1]
            course = app[6]
            try:
                bot.send_message(
                    int(tg_id),
                    f"üìÖ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–∫!\nüìò –ö—É—Ä—Å: {course}\nüóì –î–∞—Ç–∞: {formatted_date}\nüîó –°—Å—ã–ª–∫–∞: {link}"
                )
                logger.info(f"Lesson notification sent to user {tg_id}")
            except Exception as e:
                logger.error(f"Failed to notify user {tg_id}: {e}")

        writing_ids.discard(message.from_user.id)
        logger.info(f"Admin {message.from_user.id} assigned lesson for application {app_id}")

    @bot.message_handler(func=lambda m: m.text == "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã" and is_admin(m.from_user.id))
    def handle_course_menu(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
        markup.add("‚ùÑ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∫—É—Ä—Å", "üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å")
        markup.add("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã")
        markup.add("üì® –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üéì –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and is_admin(m.from_user.id))
    def handle_export_data(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏", callback_data="export_applications"),
            types.InlineKeyboardButton("–ê—Ä—Ö–∏–≤", callback_data="export_archive")
        )
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data in ["export_applications", "export_archive"])
    def handle_export_choice(call):
        if call.data == "export_applications":
            data = get_all_applications()
            filename = "applications_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ"
            ]
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
            rows = []
            for row in data:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at = row
                if status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ":
                    status_str = "–ù–∞–∑–Ω–∞—á–µ–Ω–æ"
                else:
                    status_str = "–û–∂–∏–¥–∞–µ—Ç"
                rows.append([
                    app_id, tg_id, parent_name, student_name, age, contact, course,
                    lesson_date, lesson_link, status_str, created_at
                ])
        else:
            data = get_all_archive()
            filename = "archive_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ", "–ö–µ–º –æ—Ç–º–µ–Ω–µ–Ω–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            ]
            rows = data
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(headers)
        for row in rows:
            ws.append(row)
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_length = 0
            col_letter = get_column_letter(col[0].column)
            for cell in col:
                try:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                except:
                    pass
            ws.column_dimensions[col_letter].width = max_length + 2
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            wb.save(tmp.name)
            tmp_path = tmp.name
        with open(tmp_path, "rb") as f:
            bot.send_document(call.message.chat.id, f, visible_file_name=filename)
        os.remove(tmp_path)
        bot.answer_callback_query(call.id, "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    @bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and is_admin(m.from_user.id))
    def handle_contacts_menu(message):
        contacts = get_open_contacts()
        if not contacts:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_admin_menu())
            return
        for c in contacts:
            contact_id, user_tg_id, user_contact, msg, admin_reply, status, created_at, reply_at, banned = c
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ
            file_match = re.match(r"\[–í–ª–æ–∂–µ–Ω–∏–µ: (\w+), file_id: ([\w\-_]+)\](.*)", msg, re.DOTALL)
            if file_match:
                file_type, file_id, caption = file_match.groups()
                caption = caption.strip() or None
                if file_type == 'photo':
                    bot.send_photo(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'document':
                    bot.send_document(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'voice':
                    bot.send_voice(message.chat.id, file_id)
                elif file_type == 'video':
                    bot.send_video(message.chat.id, file_id, caption=f"–û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id} –æ—Ç {user_contact}\n{caption or ''}")
                elif file_type == 'video_note':
                    bot.send_video_note(message.chat.id, file_id)
                # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                text = (
                    f"üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_contact} (ID: {user_tg_id})\n"
                    f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"\n–¢–µ–∫—Å—Ç: (—Å–º. –≤–ª–æ–∂–µ–Ω–∏–µ –≤—ã—à–µ)"
                )
            else:
                text = (
                    f"üÜò –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_contact} (ID: {user_tg_id})\n"
                    f"‚è∞ –í—Ä–µ–º—è: {created_at}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"\n–¢–µ–∫—Å—Ç: {msg}"
                )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_contact:{contact_id}"))
            markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_contact:{user_tg_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("reply_contact:"))
    def handle_reply_contact(call):
        contact_id = int(call.data.split(":")[1])
        bot.send_message(call.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: process_admin_reply(m, contact_id))

    def process_admin_reply(message, contact_id):
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_admin_menu())
            return
        reply_to_contact(contact_id, message.text)
        contact = get_contact_by_id(contact_id)
        user_tg_id = contact[1]
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=get_admin_menu())
        bot.send_message(int(user_tg_id), f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("ban_contact:"))
    def handle_ban_contact(call):
        user_tg_id = call.data.split(":")[1]
        ban_user_by_contact(user_tg_id)
        bot.send_message(call.message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π.", reply_markup=get_admin_menu())

    @bot.message_handler(commands=["ClearContacts"])
    def handle_clear_contacts(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearContacts")
            return
        from data.db import clear_contacts
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="confirm_clear_contacts"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_contacts")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearContacts")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_contacts", "cancel_clear_contacts"])
    def handle_clear_contacts_confirm(call):
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm clear contacts without admin rights")
            return
        from data.db import clear_contacts
        if call.data == "confirm_clear_contacts":
            clear_contacts()
            bot.send_message(call.message.chat.id, "üßπ –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"Admin {call.from_user.id} cleared all contacts")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled clear contacts")

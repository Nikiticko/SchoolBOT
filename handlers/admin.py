from telebot import types
from services.sheets_init import worksheet
from services.courses_service import get_courses
from config import ADMIN_ID

def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

def notify_admin_new_application(bot, application_data):
    try:
        notification = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            f"üë§ –ò–º—è: {application_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {application_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö –ö—É—Ä—Å: {application_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üéØ –¶–µ–ª—å: {application_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {application_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        bot.send_message(ADMIN_ID, notification)
        print(f"[‚úÖ] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")

def register(bot):
    def show_admin_panel(chat_id):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã")  # ‚Üê –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=markup)


    @bot.message_handler(commands=["start"])
    def handle_start(message):
        user_id = message.from_user.id
        print(f"[DEBUG] /start –æ—Ç ID: {user_id}")
        print(f"[DEBUG] ADMIN_ID = {ADMIN_ID} (type={type(ADMIN_ID)}), user_id = {user_id} (type={type(user_id)})")
        print(f"[DEBUG] /start –æ—Ç {user_id}")
        if is_admin(user_id):
            print("[DEBUG] –≠—Ç–æ –∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            show_admin_panel(message.chat.id)
        else:
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")

    @bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫" and is_admin(m.from_user.id))
    def handle_pending_applications(message):
        print(f"[DEBUG] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –æ—Ç {message.from_user.id}")
        try:
            data = worksheet.get_all_values()
            if len(data) <= 1:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ")
                return

            headers = data[0]
            try:
                date_col = headers.index('–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è')
                link_col = headers.index('–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ')
                name_col = headers.index('–ò–º—è')
                contact_col = headers.index('–ö–æ–Ω—Ç–∞–∫—Ç—ã')
                course_col = headers.index('–ö—É—Ä—Å')
                goal_col = headers.index('–¶–µ–ª—å')
                age_col = headers.index('–í–æ–∑—Ä–∞—Å—Ç')
                id_col = headers.index('ID')
            except ValueError as e:
                bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
                return

            pending_apps = []

            for row in data[1:]:
                date = str(row[date_col]).strip() if date_col < len(row) else ""
                link = str(row[link_col]).strip() if link_col < len(row) else ""

                if not date and not link:
                    app_info = (
                        f"üë§ –ò–º—è: {row[name_col] if name_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {row[contact_col] if contact_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üìö –ö—É—Ä—Å: {row[course_col] if course_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üéØ –¶–µ–ª—å: {row[goal_col] if goal_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {row[age_col] if age_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üÜî ID –≤ —Ç–∞–±–ª–∏—Ü–µ: {row[id_col] if id_col < len(row) else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"-------------------"
                    )
                    pending_apps.append(app_info)

            if pending_apps:
                response = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã:\n\n" + "\n\n".join(pending_apps)
                if len(response) > 4000:
                    parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                    for part in parts:
                        bot.send_message(message.chat.id, part)
                else:
                    bot.send_message(message.chat.id, response)
            else:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã")

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}")

    @bot.message_handler(func=lambda m: m.text == "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã" and is_admin(m.from_user.id))
    def handle_course_menu(message):
        print(f"[DEBUG] –í—Ö–æ–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫—É—Ä—Å–æ–≤ –æ—Ç ID: {message.from_user.id}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
        markup.add("‚ùÑ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∫—É—Ä—Å", "üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å")
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üéì –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", reply_markup=markup)

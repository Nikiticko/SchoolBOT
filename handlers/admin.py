from telebot import types
from config import ADMIN_ID
from data.db import (
    get_pending_applications,
    clear_applications,
    update_application_lesson,
    get_application_by_id,
    format_date_for_display,
    validate_date_format,
    get_all_applications,
    get_all_archive
)
from state.users import writing_ids
from data.db import clear_archive
from utils.menu import get_admin_menu, get_cancel_button, handle_cancel_action
import openpyxl
from openpyxl.utils import get_column_letter
import tempfile
import os


def is_admin(user_id):
    return str(user_id) == str(ADMIN_ID)

def notify_admin_new_application(bot, application_data):
    try:
        notification = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ!\n\n"
            f"üë§ –ò–º—è: {application_data.get('parent_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üßí –£—á–µ–Ω–∏–∫: {application_data.get('student_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {application_data.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìö –ö—É—Ä—Å: {application_data.get('course', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {application_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        bot.send_message(ADMIN_ID, notification)
        print(f"[‚úÖ] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
    except Exception as e:
        print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")


def register(bot, logger):
    @bot.message_handler(commands=["ClearApplications"])
    def handle_clear_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearApplications")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearApplications")

    @bot.message_handler(commands=["ClearArchive"])
    def handle_clear_archive_command(message):
        if not is_admin(message.from_user.id):
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearArchive")
            return

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏–≤", callback_data="confirm_clear_archive"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_archive")
        )
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
            reply_markup=markup
        )
        logger.info(f"Admin {message.from_user.id} initiated ClearArchive")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_archive", "cancel_clear_archive"])
    def handle_clear_archive_confirm(call):
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm archive clear without admin rights")
            return

        if call.data == "confirm_clear_archive":
            clear_archive()
            bot.send_message(call.message.chat.id, "üßπ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")
            logger.info(f"Admin {call.from_user.id} cleared archive")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled archive clear")

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
    def handle_clear_confirm(call):
        chat_id = call.message.chat.id
        if not is_admin(call.from_user.id):
            logger.warning(f"User {call.from_user.id} tried to confirm clear without admin rights")
            return

        if call.data == "confirm_clear":
            clear_applications()
            bot.send_message(chat_id, "‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
            logger.info(f"Admin {call.from_user.id} cleared all applications")
        else:
            bot.send_message(chat_id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled clear")

    @bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫" and is_admin(m.from_user.id))
    def handle_pending_applications(message):
        try:
            applications = get_pending_applications()
            if not applications:
                bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã")
                return

            for app in applications:
                app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at = app
                formatted_created = format_date_for_display(created_at)
                text = (
                    f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                    f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                    f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"üìò –ö—É—Ä—Å: {course}\n"
                    f"üìÖ –°—Ç–∞—Ç—É—Å: {status}\n"
                    f"üïí –°–æ–∑–¥–∞–Ω–æ: {formatted_created}"
                )
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üïí –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign:{app_id}"))
                bot.send_message(message.chat.id, text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} viewed pending applications")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {str(e)}")
            logger.error(f"Error in handle_pending_applications: {e}")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("assign:"))
    def handle_assign_callback(call):
        app_id = int(call.data.split(":")[1])
        writing_ids.add(call.from_user.id)
        bot.send_message(call.message.chat.id, f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{app_id} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):", reply_markup=get_cancel_button())
        bot.register_next_step_handler(call.message, lambda m: get_link(m, app_id))

    def get_link(message, app_id):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        date_text = message.text.strip()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
        is_valid, result = validate_date_format(date_text)
        
        if not is_valid:
            bot.send_message(
                message.chat.id, 
                f"‚ùå {result}\n\nüìÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22.06 17:00):",
                reply_markup=get_cancel_button()
            )
            bot.register_next_step_handler(message, lambda m: get_link(m, app_id))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        user_data['valid_date'] = result
        message._user_data = user_data
        
        bot.send_message(message.chat.id, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Ä–æ–∫:", reply_markup=get_cancel_button())
        bot.register_next_step_handler(message, lambda m: finalize_lesson(m, app_id, date_text))

    def finalize_lesson(message, app_id, date_text):
        if message.from_user.id not in writing_ids:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            writing_ids.discard(message.from_user.id)
            handle_cancel_action(bot, message, "—É—Ä–æ–∫", logger)
            return
        
        link = message.text.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
        user_data = getattr(message, '_user_data', {})
        valid_date = user_data.get('valid_date')
        
        if valid_date:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É (datetime –æ–±—ä–µ–∫—Ç)
            update_application_lesson(app_id, valid_date, link)
            formatted_date = format_date_for_display(valid_date)
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∏ –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –ª—É—á—à–µ–µ
            update_application_lesson(app_id, date_text, link)
            formatted_date = date_text
        
        bot.send_message(message.chat.id, f"‚úÖ –£—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω!\nüìÖ {formatted_date}\nüîó {link}", reply_markup=get_admin_menu())

        app = get_application_by_id(app_id)
        if app:
            tg_id = app[1]
            course = app[6]
            try:
                bot.send_message(
                    int(tg_id),
                    f"üìÖ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–∫!\nüìò –ö—É—Ä—Å: {course}\nüóì –î–∞—Ç–∞: {formatted_date}\nüîó –°—Å—ã–ª–∫–∞: {link}"
                )
                logger.info(f"Lesson notification sent to user {tg_id}")
            except Exception as e:
                logger.error(f"Failed to notify user {tg_id}: {e}")

        writing_ids.discard(message.from_user.id)
        logger.info(f"Admin {message.from_user.id} assigned lesson for application {app_id}")

    @bot.message_handler(func=lambda m: m.text == "üìö –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å—ã" and is_admin(m.from_user.id))
    def handle_course_menu(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å", "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
        markup.add("‚ùÑ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∫—É—Ä—Å", "üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å")
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(message.chat.id, "üéì –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and is_admin(m.from_user.id))
    def handle_export_data(message):
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–ó–∞—è–≤–∫–∏", callback_data="export_applications"),
            types.InlineKeyboardButton("–ê—Ä—Ö–∏–≤", callback_data="export_archive")
        )
        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å?", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data in ["export_applications", "export_archive"])
    def handle_export_choice(call):
        if call.data == "export_applications":
            data = get_all_applications()
            filename = "applications_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ"
            ]
        else:
            data = get_all_archive()
            filename = "archive_export.xlsx"
            headers = [
                "ID", "TG ID", "–†–æ–¥–∏—Ç–µ–ª—å", "–£—á–µ–Ω–∏–∫", "–í–æ–∑—Ä–∞—Å—Ç", "–ö–æ–Ω—Ç–∞–∫—Ç", "–ö—É—Ä—Å",
                "–î–∞—Ç–∞ —É—Ä–æ–∫–∞", "–°—Å—ã–ª–∫–∞", "–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω–æ", "–ö–µ–º –æ—Ç–º–µ–Ω–µ–Ω–æ", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã"
            ]

        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(headers)
        for row in data:
            ws.append(row)
        # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        for col in ws.columns:
            max_length = 0
            col_letter = get_column_letter(col[0].column)
            for cell in col:
                try:
                    if cell.value:
                        max_length = max(max_length, len(str(cell.value)))
                except:
                    pass
            ws.column_dimensions[col_letter].width = max_length + 2
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            wb.save(tmp.name)
            tmp_path = tmp.name
        with open(tmp_path, "rb") as f:
            bot.send_document(call.message.chat.id, f, visible_file_name=filename)
        os.remove(tmp_path)
        bot.answer_callback_query(call.id, "–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

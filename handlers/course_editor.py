from telebot import types
from data.db import get_all_courses, add_course, delete_course, update_course, toggle_course_active
from handlers.admin import is_admin
from utils.menu import get_admin_menu

def register_course_editor(bot):
    @bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å" and is_admin(m.from_user.id))
    def handle_add_course(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(message, lambda m: get_course_name(m, bot))

    def get_course_name(message, bot):
        name = message.text.strip()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(message, lambda m: save_new_course(m, bot, name))

    def save_new_course(message, bot, name):
        desc = message.text.strip()
        add_course(name, desc)
        bot.send_message(message.chat.id, f"‚úÖ –ö—É—Ä—Å ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")


    @bot.message_handler(func=lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å" and is_admin(m.from_user.id))
    def handle_delete_course(message):
        courses = get_all_courses()
        if not courses:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for c in courses:
            btn = types.InlineKeyboardButton(f"‚ùå {c[1]}", callback_data=f"delete_course:{c[0]}")
            markup.add(btn)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "‚ùÑ –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∫—É—Ä—Å" and is_admin(m.from_user.id))
    def handle_toggle_course(message):
        courses = get_all_courses()
        if not courses:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∫—É—Ä—Å–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for c in courses:
            status = "‚úÖ" if c[3] else "üö´"
            markup.add(types.InlineKeyboardButton(f"{status} {c[1]}", callback_data=f"toggle_course:{c[0]}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∑–∞–º–æ—Ä–æ–∑–∫–∏/—Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏:", reply_markup=markup)

    @bot.message_handler(func=lambda m: m.text == "üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å" and is_admin(m.from_user.id))
    def handle_edit_course(message):
        courses = get_all_courses()
        if not courses:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∫—É—Ä—Å–æ–≤.")
            return

        markup = types.InlineKeyboardMarkup()
        for c in courses:
            markup.add(types.InlineKeyboardButton(f"‚úè {c[1]}", callback_data=f"edit_course:{c[0]}"))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("delete_course:"))
    def confirm_delete_course(call):
        course_id = int(call.data.split(":")[1])
        delete_course(course_id)
        bot.edit_message_text("‚úÖ –ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("toggle_course:"))
    def confirm_toggle_course(call):
        course_id = int(call.data.split(":")[1])
        toggle_course_active(course_id)
        bot.edit_message_text("üîÅ –°—Ç–∞—Ç—É—Å –∫—É—Ä—Å–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.", call.message.chat.id, call.message.message_id)

    @bot.callback_query_handler(func=lambda c: c.data.startswith("edit_course:"))
    def start_editing(call):
        course_id = int(call.data.split(":")[1])
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(call.message, lambda m: get_new_name(m, course_id))

    def get_new_name(message, course_id):
        name = message.text.strip()
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda m: apply_edit(m, course_id, name))

    def apply_edit(message, course_id, name):
        desc = message.text.strip()
        update_course(course_id, name, desc)
        bot.send_message(message.chat.id, f"‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {name}")
    @bot.message_handler(func=lambda m: m.text == "üîô –ù–∞–∑–∞–¥" and is_admin(m.from_user.id))
    def handle_back_to_admin_panel(message):
        bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_menu())

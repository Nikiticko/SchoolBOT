from telebot import types
from data.db import get_all_reviews, clear_reviews, get_review_stats
from config import ADMIN_ID
from utils.security_logger import security_logger

def register_reviews_handlers(bot, logger):
    def is_admin(user_id):
        return str(user_id) == str(ADMIN_ID)

    @bot.message_handler(func=lambda m: m.text == "‚≠ê –û—Ç–∑—ã–≤—ã" and is_admin(m.from_user.id))
    def handle_admin_reviews(message):
        stats = get_review_stats()
        if isinstance(stats, dict):
            total = stats.get('total', 0)
            public = stats.get('public', 0)
            anonymous = stats.get('anonymous', 0)
        else:
            # –û–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (total, public, anonymous)
            total, public, anonymous = stats if stats and len(stats) == 3 else (0, 0, 0)

        msg = (
            f"‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤</b>\n\n"
            f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: <b>{total}</b>\n"
            f"–ü—É–±–ª–∏—á–Ω—ã—Ö: <b>{public}</b>\n"
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã—Ö: <b>{anonymous}</b>\n\n"
            f"–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ClearReviews"
        )
        bot.send_message(message.chat.id, msg, parse_mode="HTML")

    @bot.message_handler(commands=["ClearReviews"])
    def handle_clear_reviews_command(message):
        if not is_admin(message.from_user.id):
            security_logger.log_failed_login(
                message.from_user.id, 
                message.from_user.username or "unknown", 
                "Unauthorized access to admin command ClearReviews"
            )
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearReviews")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="confirm_clear_reviews"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_reviews")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearReviews")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_reviews", "cancel_clear_reviews"])
    def handle_clear_reviews_confirm(call):
        if not is_admin(call.from_user.id):
            security_logger.log_unauthorized_access(
                call.from_user.id,
                call.from_user.username or "unknown",
                "admin_reviews_clear",
                call.data
            )
            logger.warning(f"User {call.from_user.id} tried to confirm reviews clear without admin rights")
            return
        if call.data == "confirm_clear_reviews":
            try:
                clear_reviews()
                bot.send_message(call.message.chat.id, "üßπ –û—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
                logger.info(f"Admin {call.from_user.id} cleared reviews")
            except Exception as e:
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"Error clearing reviews: {e}")
        else:
            bot.send_message(call.message.chat.id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled reviews clear")

 
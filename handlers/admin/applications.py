from telebot import types
from data.db import get_pending_applications, clear_applications, update_application_lesson, get_application_by_id, format_date_for_display
from utils.menu import get_admin_menu
from config import ADMIN_ID
from utils.security_logger import security_logger
from handlers.admin_actions import register_admin_actions

def register_applications_handlers(bot, logger):
    def is_admin(user_id):
        return str(user_id) == str(ADMIN_ID)

    @bot.message_handler(commands=["ClearApplications"])
    def handle_clear_command(message):
        if not is_admin(message.from_user.id):
            security_logger.log_failed_login(
                message.from_user.id, 
                message.from_user.username or "unknown", 
                "Unauthorized access to admin command ClearApplications"
            )
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearApplications")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearApplications")

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
    def handle_clear_confirm(call):
        chat_id = call.message.chat.id
        if not is_admin(call.from_user.id):
            security_logger.log_unauthorized_access(
                call.from_user.id,
                call.from_user.username or "unknown",
                "admin_applications_clear",
                call.data
            )
            logger.warning(f"User {call.from_user.id} tried to confirm clear without admin rights")
            return
        if call.data == "confirm_clear":
            try:
                clear_applications()
                bot.send_message(chat_id, "‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
                logger.info(f"Admin {call.from_user.id} cleared all applications")
            except Exception as e:
                bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"Error clearing applications: {e}")
        else:
            bot.send_message(chat_id, "‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            logger.info(f"Admin {call.from_user.id} cancelled clear")

    @bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫" and is_admin(m.from_user.id))
    def handle_pending_applications(message):
        applications = get_pending_applications()
        if not applications:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–∞—Ç—ã")
            return
        for app in applications:
            app_id, tg_id, parent_name, student_name, age, contact, course, lesson_date, lesson_link, status, created_at, reminder_sent = app
            formatted_created = format_date_for_display(created_at)
            status_str = "–ù–∞–∑–Ω–∞—á–µ–Ω–æ" if status == "–ù–∞–∑–Ω–∞—á–µ–Ω–æ" else "–û–∂–∏–¥–∞–µ—Ç"
            text = (
                f"üÜî –ó–∞—è–≤–∫–∞ #{app_id}\n"
                f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
                f"üßí –£—á–µ–Ω–∏–∫: {student_name}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                f"üìò –ö—É—Ä—Å: {course}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_str}\n"
                f"üïí –°–æ–∑–¥–∞–Ω–æ: {formatted_created}"
            )
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üïí –ù–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"assign:{app_id}"))
            bot.send_message(message.chat.id, text, reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} viewed pending applications")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ admin_actions.py (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞, –ø–µ—Ä–µ–Ω–æ—Å –∏ —Ç.–¥.)
    register_admin_actions(bot, logger) 
from telebot import types
from utils.security_logger import security_logger
from config import ADMIN_ID
import os
from datetime import datetime
from utils.menu import is_admin

def register_security_handlers(bot, logger):
    @bot.message_handler(commands=["security_report"])
    def handle_security_report(message):
        if not is_admin(message.from_user.id):
            security_logger.log_failed_login(
                message.from_user.id, 
                message.from_user.username or "unknown", 
                "Unauthorized access to admin command security_report"
            )
            logger.warning(f"User {message.from_user.id} tried to access admin command security_report")
            return
        try:
            report = security_logger.get_security_report(hours=24)
            report_text = (
                "üîí –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):\n\n"
                f"üö´ –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {report.get('failed_logins', 0)}\n"
                f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {report.get('suspicious_activities', 0)}\n"
                f"‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit: {report.get('rate_limit_exceeded', 0)}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {report.get('user_bans', 0)}\n"
                f"üö™ –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {report.get('unauthorized_access', 0)}\n"
                f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {report.get('input_validation_failed', 0)}\n\n"
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
            )
            total_events = sum(report.values())
            threat_level = None
            if total_events == 0:
                report_text += "\n‚úÖ –í—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ, —É–≥—Ä–æ–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                threat_level = "none"
            elif total_events < 10:
                report_text += "\nüü° –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑"
                threat_level = "low"
            elif total_events < 50:
                report_text += "\nüü† –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑"
                threat_level = "medium"
            else:
                report_text += "\nüî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑!"
                threat_level = "high"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚¨áÔ∏è –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç (XLS)", callback_data="export_security_log"))
            bot.send_message(message.chat.id, report_text, reply_markup=markup)
            logger.info(f"Admin {message.from_user.id} requested security report")
            security_logger.log_admin_action(
                message.from_user.id,
                message.from_user.username or "unknown",
                "security_report_requested"
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å—Ä–µ–¥–Ω–µ–º/–≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —É–≥—Ä–æ–∑
            if threat_level in ("medium", "high"):
                try:
                    bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í —Å–∏—Å—Ç–µ–º–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω {('—Å—Ä–µ–¥–Ω–∏–π' if threat_level=='medium' else '–≤—ã—Å–æ–∫–∏–π')} —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
                except Exception as notify_err:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {notify_err}")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")
            logger.error(f"Error in security report: {e}")

    @bot.callback_query_handler(func=lambda c: c.data == "export_security_log")
    def handle_export_security_log(call):
        if not is_admin(call.from_user.id):
            security_logger.log_failed_login(
                call.from_user.id,
                call.from_user.username or "unknown",
                "Unauthorized export_security_log"
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤")
            return
        try:
            filename = f"security_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            filepath = os.path.join(os.getcwd(), filename)
            count = security_logger.export_security_log_to_xls(filepath, hours=24)
            if count == 0:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.")
            else:
                with open(filepath, "rb") as f:
                    caption = f"üîí –û—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ({count} —Å–æ–±—ã—Ç–∏–π)\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –§–∞–π–ª –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –Ω—É–∂–µ–Ω –Ω–∞–¥–æ–ª–≥–æ"
                    bot.send_document(call.message.chat.id, f, caption=caption, parse_mode="HTML")
                os.remove(filepath)
        except Exception as e:
            bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–∞: {str(e)}") 
from telebot import types
from data.db import get_open_contacts, clear_contacts, update_contact_reply, ban_user_by_contact, is_user_banned, get_contact_by_id
from config import ADMIN_ID
from utils.security_logger import security_logger
from utils.menu import get_admin_menu, is_admin
from state.users import user_data
import re

def register_contacts_handlers(bot, logger):
    @bot.message_handler(func=lambda m: m.text == "üì® –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" and is_admin(m.from_user.id))
    def handle_contacts_menu(message):
        try:
            contacts = get_open_contacts()
            if not contacts:
                bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞.", reply_markup=get_admin_menu())
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
            for contact in contacts:
                contact_id, tg_id, user_contact, contact_text, admin_reply, status, contact_time, reply_at, banned, ban_reason = contact
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                match = re.search(r'\[–í–ª–æ–∂–µ–Ω–∏–µ: (\w+), file_id: ([\w-]+)\]', contact_text)
                if match:
                    file_type, file_id = match.group(1), match.group(2)
                    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    text_only = contact_text.replace(match.group(0), '').strip()
                    msg = (
                        f"üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id}\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üìÖ –í—Ä–µ–º—è: {contact_time}\n"
                        f"\n‚Äî‚Äî‚Äî –í–ª–æ–∂–µ–Ω–∏–µ ‚Äî‚Äî‚Äî\n[{file_type}, file_id: {file_id}]\n"
                    )
                    if text_only:
                        msg += f"\n‚Äî‚Äî‚Äî –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî‚Äî‚Äî\n{text_only}\n"
                    msg += f"\nüìä –°—Ç–∞—Ç—É—Å: {status}"
                else:
                    msg = (
                        f"üì® –û–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id}\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_contact or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"üìÖ –í—Ä–µ–º—è: {contact_time}\n"
                        f"\n‚Äî‚Äî‚Äî –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî‚Äî‚Äî\n{contact_text.strip()}\n"
                        f"\nüìä –°—Ç–∞—Ç—É—Å: {status}"
                    )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_contact:{contact_id}"))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if not is_user_banned(tg_id):
                    markup.add(types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"ban_user:{tg_id}:{contact_id}"))
                else:
                    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", callback_data="user_already_banned"))
                
                bot.send_message(message.chat.id, msg, reply_markup=markup)
                # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω—É
                if match:
                    try:
                        if file_type == 'photo':
                            bot.send_photo(message.chat.id, file_id)
                        elif file_type == 'document':
                            bot.send_document(message.chat.id, file_id)
                        elif file_type == 'audio':
                            bot.send_audio(message.chat.id, file_id)
                        elif file_type == 'voice':
                            bot.send_voice(message.chat.id, file_id)
                        elif file_type == 'video_note':
                            bot.send_video_note(message.chat.id, file_id)
                        elif file_type == 'sticker':
                            bot.send_sticker(message.chat.id, file_id)
                    except Exception as e:
                        bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ: {e}")
            
            logger.info(f"Admin {message.from_user.id} viewed open contacts")
        except Exception as e:
            logger.error(f"Error in handle_contacts_menu: {e}")

    @bot.message_handler(commands=["ClearContacts"])
    def handle_clear_contacts(message):
        if not is_admin(message.from_user.id):
            security_logger.log_failed_login(
                message.from_user.id, 
                message.from_user.username or "unknown", 
                "Unauthorized access to admin command ClearContacts"
            )
            logger.warning(f"User {message.from_user.id} tried to access admin command ClearContacts")
            return
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="confirm_clear_contacts"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_clear_contacts")
        )
        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=markup)
        logger.info(f"Admin {message.from_user.id} initiated ClearContacts")

    @bot.callback_query_handler(func=lambda c: c.data in ["confirm_clear_contacts", "cancel_clear_contacts"])
    def handle_clear_contacts_confirm(call):
        if not is_admin(call.from_user.id):
            security_logger.log_unauthorized_access(
                call.from_user.id,
                call.from_user.username or "unknown",
                "admin_contacts_clear",
                call.data
            )
            logger.warning(f"User {call.from_user.id} tried to confirm contacts clear without admin rights")
            return
        if call.data == "confirm_clear_contacts":
            try:
                clear_contacts()
                bot.edit_message_text("üßπ –û–±—Ä–∞—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.", call.message.chat.id, call.message.message_id)
                logger.info(f"Admin {call.from_user.id} cleared contacts")
            except Exception as e:
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.error(f"Error clearing contacts: {e}")
        else:
            bot.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
            logger.info(f"Admin {call.from_user.id} cancelled contacts clear")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("ban_user:"))
    def handle_ban_user(call):
        if not is_admin(call.from_user.id):
            security_logger.log_unauthorized_access(
                call.from_user.id,
                call.from_user.username or "unknown",
                "admin_ban_user",
                call.data
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: ban_user:tg_id:contact_id
            parts = call.data.split(":")
            user_tg_id = parts[1]
            contact_id = parts[2]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            user_data[call.message.chat.id] = {
                "banning_user": True,
                "user_tg_id": user_tg_id,
                "contact_id": contact_id
            }
            
            msg = f"üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}\n\n"
            msg += "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'):"
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            
            bot.send_message(call.message.chat.id, msg, reply_markup=markup)
            bot.register_next_step_handler(call.message, process_ban_user)
            
            logger.info(f"Admin {call.from_user.id} started banning user {user_tg_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_ban_user: {e}")

    def process_ban_user(message):
        if not is_admin(message.from_user.id):
            return
        
        chat_id = message.chat.id
        
        if chat_id not in user_data or not user_data[chat_id].get("banning_user"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_menu())
            return
        
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            del user_data[chat_id]
            bot.send_message(chat_id, "‚ùå –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu())
            return
        
        try:
            user_tg_id = user_data[chat_id]["user_tg_id"]
            contact_id = user_data[chat_id]["contact_id"]
            ban_reason = message.text
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ban_user_by_contact(user_tg_id, ban_reason)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            try:
                notification_msg = (
                    f"üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n\n"
                    f"‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
                    f"‚Ä¢ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                    f"‚Ä¢ –í–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º\n\n"
                    f"üìû –ï—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ –æ—à–∏–±–∫–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º."
                )
                bot.send_message(user_tg_id, notification_msg, parse_mode="HTML")
                logger.info(f"Ban notification sent to user {user_tg_id}")
            except Exception as e:
                logger.error(f"Failed to send ban notification to user {user_tg_id}: {e}")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            del user_data[chat_id]
            
            bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}", reply_markup=get_admin_menu())
            logger.info(f"Admin {message.from_user.id} banned user {user_tg_id} with reason: {ban_reason}")
            
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_admin_menu())
            logger.error(f"Error banning user: {e}")

    @bot.callback_query_handler(func=lambda c: c.data == "user_already_banned")
    def handle_user_already_banned(call):
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

    @bot.callback_query_handler(func=lambda c: c.data.startswith("reply_to_contact:"))
    def handle_reply_to_contact(call):
        if not is_admin(call.from_user.id):
            security_logger.log_unauthorized_access(
                call.from_user.id,
                call.from_user.username or "unknown",
                "admin_contact_reply",
                call.data
            )
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤")
            return
        
        try:
            contact_id = int(call.data.split(":")[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ ID
            contact = get_contact_by_id(contact_id)
            
            if not contact:
                bot.answer_callback_query(call.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            contact_id, tg_id, user_contact, contact_text, admin_reply, status, contact_time, reply_at, banned, ban_reason = contact
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
            if status != "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞":
                bot.answer_callback_query(call.id, "–û–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            user_data[call.message.chat.id] = {
                "replying_to_contact": True,
                "contact_id": contact_id,
                "user_tg_id": tg_id,
                "contact_text": contact_text
            }
            
            msg = f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{contact_id}\n"
            msg += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tg_id}\n"
            msg += f"üìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: {contact_text}\n\n"
            
            msg += "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ):\n\n"
            msg += "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'"
            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("üîô –û—Ç–º–µ–Ω–∞")
            
            bot.send_message(call.message.chat.id, msg, reply_markup=markup)
            bot.register_next_step_handler(call.message, process_contact_reply)
            
            logger.info(f"Admin {call.from_user.id} started replying to contact {contact_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_reply_to_contact: {e}")

    def process_contact_reply(message):
        if not is_admin(message.from_user.id):
            return
        chat_id = message.chat.id
        if chat_id not in user_data or not user_data[chat_id].get("replying_to_contact"):
            bot.send_message(chat_id, "‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_menu())
            return
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            del user_data[chat_id]
            bot.send_message(chat_id, "‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_admin_menu())
            return
        try:
            contact_id = user_data[chat_id]["contact_id"]
            user_tg_id = user_data[chat_id]["user_tg_id"]
            contact_text = user_data[chat_id]["contact_text"]
            reply_text = message.text if message.content_type == 'text' else (message.caption or "")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
            file_id = None
            file_type = None
            if message.content_type == 'photo':
                file_id = message.photo[-1].file_id
                file_type = 'photo'
            elif message.content_type == 'document':
                file_id = message.document.file_id
                file_type = 'document'
            elif message.content_type == 'voice':
                file_id = message.voice.file_id
                file_type = 'voice'
            elif message.content_type == 'audio':
                file_id = message.audio.file_id
                file_type = 'audio'
            elif message.content_type == 'video_note':
                file_id = message.video_note.file_id
                file_type = 'video_note'
            elif message.content_type == 'sticker':
                file_id = message.sticker.file_id
                file_type = 'sticker'
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if file_id:
                # –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç caption
                if file_type == 'photo':
                    bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")
                    bot.send_photo(user_tg_id, file_id, caption=reply_text)
                elif file_type == 'document':
                    bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")
                    bot.send_document(user_tg_id, file_id, caption=reply_text)
                elif file_type == 'audio':
                    bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")
                    bot.send_audio(user_tg_id, file_id, caption=reply_text)
                elif file_type == 'voice':
                    bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:")
                    bot.send_voice(user_tg_id, file_id, caption=reply_text)
                elif file_type == 'video_note':
                    bot.send_video_note(user_tg_id, file_id)
                    if reply_text:
                        bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n{reply_text}")
                elif file_type == 'sticker':
                    bot.send_sticker(user_tg_id, file_id)
                    if reply_text:
                        bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n{reply_text}")
                update_contact_reply(contact_id, reply_text or f"[–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {message.content_type}]")
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                bot.send_message(user_tg_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n{reply_text}")
                update_contact_reply(contact_id, reply_text)
                del user_data[chat_id]
            bot.send_message(chat_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!", reply_markup=get_admin_menu())
            logger.info(f"Admin {message.from_user.id} replied to contact {contact_id}")
        except Exception as e:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_admin_menu())
            logger.error(f"Error sending contact reply: {e}") 
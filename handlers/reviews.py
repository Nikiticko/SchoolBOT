import threading
import time
from telebot import types
from data.db import (
    add_review, get_reviews_for_publication_with_deleted, get_all_reviews, 
    get_review_stats, has_user_reviewed_application
)
from utils.menu import get_main_menu, get_appropriate_menu
from utils.logger import log_error, log_user_action
from utils.decorators import error_handler, ensure_text_message, ensure_stage

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
review_states = {}

def register(bot, logger):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∑—ã–≤–æ–≤"""
    
    def send_review_request(bot, user_tg_id, application_id, course_name):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
        def delayed_request():
            time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
            if has_user_reviewed_application(application_id, user_tg_id):
                return
            
            try:
                msg = (
                    f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —É—Ä–æ–∫–µ!\n\n"
                    f"üìò –ö—É—Ä—Å: {course_name}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–Ω—è—Ç–∏–∏. "
                    f"–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü"
                )
                
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"start_review:{application_id}"),
                    types.InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_review")
                )
                
                bot.send_message(user_tg_id, msg, reply_markup=markup)
                logger.info(f"Review request sent to user {user_tg_id} for application {application_id}")
                
            except Exception as e:
                log_error(logger, e, f"Sending review request to user {user_tg_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=delayed_request, daemon=True)
        thread.start()
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("start_review:"))
    def handle_start_review(call):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            application_id = int(call.data.split(":")[1])
            user_tg_id = str(call.message.chat.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
            if has_user_reviewed_application(application_id, user_tg_id):
                bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫.", reply_markup=get_appropriate_menu(call.from_user.id))
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            review_states[user_tg_id] = {
                "application_id": application_id,
                "stage": "rating"
            }
            
            msg = (
                "üìä –û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –ø—Ä–æ—à–ª–æ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10:\n\n"
                "1Ô∏è‚É£ - –û—á–µ–Ω—å –ø–ª–æ—Ö–æ\n"
                "5Ô∏è‚É£ - –ù–æ—Ä–º–∞–ª—å–Ω–æ\n"
                "üîü - –û—Ç–ª–∏—á–Ω–æ!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:"
            )
            
            markup = types.InlineKeyboardMarkup(row_width=5)
            buttons = []
            for i in range(1, 11):
                buttons.append(types.InlineKeyboardButton(str(i), callback_data=f"rating:{i}"))
            markup.add(*buttons)
            markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_review"))
            
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
            log_user_action(logger, call.from_user.id, "started_review", f"application_id: {application_id}")
            
        except Exception as e:
            log_error(logger, e, f"Starting review for user {call.from_user.id}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("rating:"))
    def handle_rating(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        try:
            rating = int(call.data.split(":")[1])
            user_tg_id = str(call.message.chat.id)
            
            if user_tg_id not in review_states:
                bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –æ—Ç–∑—ã–≤–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_appropriate_menu(call.from_user.id))
                return
            
            review_states[user_tg_id]["rating"] = rating
            review_states[user_tg_id]["stage"] = "feedback"
            
            msg = (
                f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating}/10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–Ω—è—Ç–∏–∏:\n"
                "‚Ä¢ –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?\n"
                "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
                "‚Ä¢ –û–±—â–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç¬ª:"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_review"))
            markup.add(types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="skip_feedback"))
            
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
            
        except Exception as e:
            log_error(logger, e, f"Handling rating for user {call.from_user.id}")
    
    @bot.callback_query_handler(func=lambda call: call.data == "skip_feedback")
    def handle_skip_feedback(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
        try:
            user_tg_id = str(call.message.chat.id)
            
            if user_tg_id not in review_states:
                bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –æ—Ç–∑—ã–≤–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_appropriate_menu(call.from_user.id))
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
            review_states[user_tg_id]["feedback"] = ""
            review_states[user_tg_id]["stage"] = "anonymity"
            
            msg = (
                "üìù –í–∞—à –æ—Ç–∑—ã–≤:\n\n"
                "‚≠ê –¢–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)\n\n"
                "üîí –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–º?\n\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü—É–±–ª–∏—á–Ω—ã–π¬ª, –≤–∞—à –æ—Ç–∑—ã–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ê–Ω–æ–Ω–∏–º–Ω—ã–π¬ª, –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üåê –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="anonymity:public"),
                types.InlineKeyboardButton("üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="anonymity:anonymous")
            )
            markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_review"))
            
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=markup)
            
        except Exception as e:
            log_error(logger, e, f"Handling skip feedback for user {call.from_user.id}")
    
    @bot.message_handler(func=lambda m: m.text and str(m.chat.id) in review_states and review_states[str(m.chat.id)].get("stage") == "feedback")
    @ensure_text_message
    @ensure_stage(lambda m: review_states.get(str(m.chat.id), {}).get("stage"), "feedback", error_message="–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞–Ω—è—Ç–∏—è.")
    def handle_feedback_text(message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤"""
        try:
            user_tg_id = str(message.chat.id)
            feedback = message.text.strip()
            
            if len(feedback) < 10:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).")
                return
            
            review_states[user_tg_id]["feedback"] = feedback
            review_states[user_tg_id]["stage"] = "anonymity"
            
            msg = (
                f"üìù –í–∞—à –æ—Ç–∑—ã–≤:\n\n{feedback}\n\n"
                "üîí –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –≤–∞—à –æ—Ç–∑—ã–≤ –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–º?\n\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü—É–±–ª–∏—á–Ω—ã–π¬ª, –≤–∞—à –æ—Ç–∑—ã–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
                "‚Ä¢ –ï—Å–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ê–Ω–æ–Ω–∏–º–Ω—ã–π¬ª, –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            )
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üåê –ü—É–±–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="anonymity:public"),
                types.InlineKeyboardButton("üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤", callback_data="anonymity:anonymous")
            )
            markup.add(types.InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_review"))
            
            bot.send_message(message.chat.id, msg, reply_markup=markup)
            
        except Exception as e:
            log_error(logger, e, f"Handling feedback text for user {message.from_user.id}")
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("anonymity:"))
    def handle_anonymity_choice(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏"""
        try:
            anonymity = call.data.split(":")[1]
            user_tg_id = str(call.message.chat.id)
            
            if user_tg_id not in review_states:
                bot.send_message(call.message.chat.id, "–°–µ—Å—Å–∏—è –æ—Ç–∑—ã–≤–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_appropriate_menu(call.from_user.id))
                return
            
            is_anonymous = (anonymity == "anonymous")
            review_data = review_states[user_tg_id]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
            review_id = add_review(
                application_id=review_data["application_id"],
                user_tg_id=user_tg_id,
                rating=review_data["rating"],
                feedback=review_data["feedback"],
                is_anonymous=is_anonymous
            )
            if not review_id:
                bot.send_message(call.message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_appropriate_menu(call.from_user.id))
                logger.error(f"Failed to add review for user {user_tg_id}, application {review_data['application_id']}")
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            review_states.pop(user_tg_id, None)
            
            msg = (
                "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {review_data['rating']}/10\n"
                f"üìù –û—Ç–∑—ã–≤: {'–ê–Ω–æ–Ω–∏–º–Ω—ã–π' if is_anonymous else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n\n"
                "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üôè"
            )
            
            bot.send_message(call.message.chat.id, msg, reply_markup=get_appropriate_menu(call.from_user.id))
            log_user_action(logger, call.from_user.id, "submitted_review", f"rating: {review_data['rating']}, anonymous: {is_anonymous}")
            
        except Exception as e:
            log_error(logger, e, f"Handling anonymity choice for user {call.from_user.id}")
    
    @bot.callback_query_handler(func=lambda call: call.data in ["skip_review", "cancel_review"])
    def handle_skip_or_cancel_review(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –æ—Ç–∑—ã–≤–∞"""
        try:
            user_tg_id = str(call.message.chat.id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            review_states.pop(user_tg_id, None)
            
            if call.data == "skip_review":
                msg = "–ü–æ–Ω—è—Ç–Ω–æ! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –ø–æ–∑–∂–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º. üòä"
            else:
                msg = "–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —É—Ä–æ–∫–µ! üôè"
            
            bot.send_message(call.message.chat.id, msg, reply_markup=get_appropriate_menu(call.from_user.id))
            log_user_action(logger, call.from_user.id, "skipped_review" if call.data == "skip_review" else "cancelled_review")
            
        except Exception as e:
            log_error(logger, e, f"Handling skip/cancel review for user {call.from_user.id}")
    
    @bot.message_handler(func=lambda m: m.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
    def handle_show_reviews(message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        try:
            reviews = get_reviews_for_publication_with_deleted(limit=5)
            
            if not reviews:
                bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üòä", reply_markup=get_appropriate_menu(message.from_user.id))
                return
            
            msg = "‚≠ê –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤:\n\n"
            
            for i, review in enumerate(reviews, 1):
                rating, feedback, is_anonymous, parent_name, student_name, course, created_at = review
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                from datetime import datetime
                try:
                    dt = datetime.fromisoformat(created_at)
                    date_str = dt.strftime("%d.%m.%Y")
                except:
                    date_str = "–Ω–µ–¥–∞–≤–Ω–æ"
                
                stars = "‚≠ê" * rating
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π —Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–æ–π
                if parent_name is None and student_name is None:
                    author = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                    course_display = "[–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞]"
                else:
                    author = f"{parent_name} ({student_name})"
                    course_display = course or "[–ö—É—Ä—Å –Ω–µ —É–∫–∞–∑–∞–Ω]"
                
                msg += (
                    f"{i}. {stars} ({rating}/10)\n"
                    f"üìò –ö—É—Ä—Å: {course_display}\n"
                    f"üë§ {author}\n"
                    f"üìù {feedback[:100]}{'...' if len(feedback) > 100 else ''}\n"
                    f"üìÖ {date_str}\n\n"
                )
            
            msg += "üí¨ –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!"
            
            bot.send_message(message.chat.id, msg, reply_markup=get_appropriate_menu(message.from_user.id))
            log_user_action(logger, message.from_user.id, "viewed_reviews")
            
        except Exception as e:
            log_error(logger, e, f"Showing reviews for user {message.from_user.id}")
    
    return send_review_request 